<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Groza&#39;s</title>
  <icon>http://bilikings.top/icon.png</icon>
  <subtitle>噫|呜|呜|噫</subtitle>
  <link href="http://bilikings.top/atom.xml" rel="self"/>
  
  <link href="http://bilikings.top/"/>
  <updated>2021-04-24T02:12:31.342Z</updated>
  <id>http://bilikings.top/</id>
  
  <author>
    <name>Biliking</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>web开发基础</title>
    <link href="http://bilikings.top/2021/04/24/web%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/"/>
    <id>http://bilikings.top/2021/04/24/web%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</id>
    <published>2021-04-24T02:11:18.000Z</published>
    <updated>2021-04-24T02:12:31.342Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;名词概念&quot;&gt;&lt;a href=&quot;#名词概念&quot; class=&quot;headerlink&quot; title=&quot;名词概念&quot;&gt;&lt;/a&gt;名词概念&lt;/h2&gt;&lt;p&gt;端口：端口是TCP/IP协议簇中，应用层与传输层协议实体间的通信接口，每个端口都有一个端口号的整形标识&lt;/p&gt;
&lt;p&gt;SOCKET： 套接字，是一个抽象层，应用程序可以通过他发送或者接受数据，套接字提供在应用层进程利用网络协议栈交换数据的机制，网络套接字是IP地址和端口的组合&lt;/p&gt;
&lt;p&gt;INADDR_ANY：代指IP为0.0.0.0，泛指本机，也就是表示本机所有的ip&lt;/p&gt;
&lt;p&gt;网络字节顺序：网络数据的一种编排方式，网络自己顺序采用big endian（大端最高有效位存于内存低处，最低有效位存于内存最高处）的排序方式。&lt;/p&gt;
&lt;p&gt;本机字节顺序：本地数据的一种编排方式，一般x86的处理器都采用小端&lt;/p&gt;
&lt;p&gt;WM_SOCKET_NOTIFY：异步网络事件消息&lt;/p&gt;
&lt;p&gt;进程阻塞：正在进行的进程由于发生某种事件而无法继续执行时候，处理机而处于暂停状态，也就是说进程的执行受到阻塞&lt;/p&gt;
&lt;p&gt;HINTERNET句柄：WinINet函数创建和使用的句柄为HINTERNET类型。WinINet函数返回HINTERNET句柄，此句柄不能与其他句柄类型互换。因此，它们不能作为ReadFile或CloseHandle之类的方法参数。同样，其他句柄类型不能与WinlNet函数-起使用。 例如，CreateFile返回的句柄不能传递给InternetReadFile。&lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++" scheme="http://bilikings.top/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>接口幂等性</title>
    <link href="http://bilikings.top/2021/04/10/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/"/>
    <id>http://bilikings.top/2021/04/10/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/</id>
    <published>2021-04-10T03:16:01.000Z</published>
    <updated>2021-04-10T03:18:28.002Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;Spring-Boot-实现接口幂等性的-4-种方案&quot;&gt;&lt;a href=&quot;#Spring-Boot-实现接口幂等性的-4-种方案&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot 实现接口幂等性的 4 种方案&quot;&gt;&lt;/a&gt;Spring Boot 实现接口幂等性的 4 种方案&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;老板：怎么点击这个付款按钮我钱直接少了两遍啊？&lt;/p&gt;
&lt;p&gt;程序：你可以点第三次，扣三次的钱（大雾）&lt;/p&gt;
&lt;p&gt;老板：我不管，你给我把这个bug修复了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、什么是幂等性&quot;&gt;&lt;a href=&quot;#一、什么是幂等性&quot; class=&quot;headerlink&quot; title=&quot;一、什么是幂等性&quot;&gt;&lt;/a&gt;&lt;strong&gt;一、什么是幂等性&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;幂等是一个数学与计算机学概念，在数学中某一元运算为幂等时，其作用在任一元素两次后会和其作用一次的结果相同。&lt;/p&gt;
&lt;p&gt;在计算机中编程中，一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。幂等函数或幂等方法是指可以使用相同参数重复执行，并能获得相同结果的函数。这些函数不会影响系统状态，也不用担心重复执行会对系统造成改变。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Spring" scheme="http://bilikings.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Linux查看日志</title>
    <link href="http://bilikings.top/2021/04/01/Linux%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97/"/>
    <id>http://bilikings.top/2021/04/01/Linux%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97/</id>
    <published>2021-04-01T06:15:31.000Z</published>
    <updated>2021-04-01T06:18:28.919Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Linux查看日志&quot;&gt;&lt;a href=&quot;#Linux查看日志&quot; class=&quot;headerlink&quot; title=&quot;Linux查看日志&quot;&gt;&lt;/a&gt;Linux查看日志&lt;/h1&gt;&lt;h3 id=&quot;查看linux日志（以tomcat为例，先切换到：cd-usr-local-tomcat3-logs）&quot;&gt;&lt;a href=&quot;#查看linux日志（以tomcat为例，先切换到：cd-usr-local-tomcat3-logs）&quot; class=&quot;headerlink&quot; title=&quot;查看linux日志（以tomcat为例，先切换到：cd usr/local/tomcat3/logs）&quot;&gt;&lt;/a&gt;查看linux日志（以tomcat为例，先切换到：cd usr/local/tomcat3/logs）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;tail（查看尾部）&lt;/li&gt;
&lt;li&gt;head（查看头部）&lt;/li&gt;
&lt;li&gt;cat&lt;/li&gt;
&lt;li&gt;tac（由最后一行到第一行反向在萤幕上显示出来）&lt;/li&gt;
&lt;li&gt;sed（查找日志文件特定的一段 , 也可以根据时间的一个范围查询）&lt;/li&gt;
&lt;li&gt;less&lt;/li&gt;
&lt;li&gt;echo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-f 循环读取&lt;/p&gt;
&lt;p&gt;-q 不显示处理信息&lt;/p&gt;
&lt;p&gt;-v 显示详细的处理信息&lt;/p&gt;
&lt;p&gt;-c&amp;lt;数目&amp;gt; 显示的字节数&lt;/p&gt;
&lt;p&gt;-n&amp;lt;行数&amp;gt; 显示行数&lt;/p&gt;
&lt;p&gt;-q, –quiet, –silent 从不输出给出文件名的首部&lt;/p&gt;
&lt;p&gt;-s, –sleep-interval=S 与-f合用,表示在每次反复的间隔休眠S秒&lt;/p&gt;
&lt;p&gt;tail -n 100 catalina.out 查询日志尾部最后100行的日志;&lt;/p&gt;
&lt;p&gt;tail -n +100 catalina.out 查询100行之后的所有日志;&lt;/p&gt;
&lt;p&gt;tail -fn 100 catalina.out 循环实时查看最后100行记录(最常用的)&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="http://bilikings.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Spring事务</title>
    <link href="http://bilikings.top/2021/03/31/Spring%E4%BA%8B%E5%8A%A1/"/>
    <id>http://bilikings.top/2021/03/31/Spring%E4%BA%8B%E5%8A%A1/</id>
    <published>2021-03-31T09:56:09.000Z</published>
    <updated>2021-03-31T09:56:36.052Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Spring事务&quot;&gt;&lt;a href=&quot;#Spring事务&quot; class=&quot;headerlink&quot; title=&quot;Spring事务&quot;&gt;&lt;/a&gt;Spring事务&lt;/h1&gt;&lt;p&gt;spring事务是在方法上添加@Transactional注解，这个注解能有7个参数，表示了不同事务的传播级别&lt;/p&gt;
&lt;h3 id=&quot;七种事务传播行为&quot;&gt;&lt;a href=&quot;#七种事务传播行为&quot; class=&quot;headerlink&quot; title=&quot;七种事务传播行为&quot;&gt;&lt;/a&gt;七种事务传播行为&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;PROPAGATION_REQUIRED&lt;/strong&gt; – 支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PROPAGATION_SUPPORTS&lt;/strong&gt; – 支持当前事务，如果当前没有事务，就以非事务方式执行。&lt;ul&gt;
&lt;li&gt;PROPAGATION_SUPPORTS如果无事务则以非事务运行,如果有事务则加入当前事务,这样和不使用注解有什么区别呢? &lt;ul&gt;
&lt;li&gt;这样他抛异常,可以回滚.两种调用方法,一个是控制层调用,一个是另一个事务调用.如果控制层调用,他是和没有事务注解一样的,如果是另一个事务调用(其他service),那么他抛异常的时候,会出现回滚.区别了使用场景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PROPAGATION_MANDATORY&lt;/strong&gt; – 支持当前事务，如果当前没有事务，就抛出异常。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PROPAGATION_REQUIRES_NEW&lt;/strong&gt; – 新建事务，如果当前存在事务，把当前事务挂起。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PROPAGATION_NOT_SUPPORTED&lt;/strong&gt; – 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PROPAGATION_NEVER&lt;/strong&gt; – 以非事务方式执行，如果当前存在事务，则抛出异常。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PROPAGATION_NESTED&lt;/strong&gt; – 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;常用的两个事务传播属性是1和4，即PROPAGATION_REQUIRED，PROPAGATION_REQUIRES_NEW&lt;/p&gt;</summary>
    
    
    
    
    <category term="Spring" scheme="http://bilikings.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>数据库事务与隔离级别</title>
    <link href="http://bilikings.top/2021/03/31/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    <id>http://bilikings.top/2021/03/31/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</id>
    <published>2021-03-31T02:36:26.000Z</published>
    <updated>2021-03-31T02:36:35.945Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Mysql事务&quot;&gt;&lt;a href=&quot;#Mysql事务&quot; class=&quot;headerlink&quot; title=&quot;Mysql事务&quot;&gt;&lt;/a&gt;Mysql事务&lt;/h1&gt;&lt;p&gt;因为MyIsAM是没有事务的，所以说数据库事务只存在于InnoDB中&lt;/p&gt;
&lt;h3 id=&quot;数据库要是能支持事务必须要满足ACID&quot;&gt;&lt;a href=&quot;#数据库要是能支持事务必须要满足ACID&quot; class=&quot;headerlink&quot; title=&quot;数据库要是能支持事务必须要满足ACID&quot;&gt;&lt;/a&gt;数据库要是能支持事务必须要满足ACID&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;原子性（Atomicity）&lt;ul&gt;
&lt;li&gt;一个事务中的所有执行语句要么全部成功，要么全部失败回滚&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一致性（Consistency）&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一致读&lt;/strong&gt; 事务读取数据只能从一个状态中读取，不能从2个或者2个以上状态读取。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致写&lt;/strong&gt; 事务执行的数据变更只能基于上一个一致的状态，且只能体现在一个状态中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;隔离性（Isolation）&lt;ul&gt;
&lt;li&gt;每个事务都不能访问到其他事务操作过程中的状态。他们等于互相不可见。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;持久性（Durability）&lt;ul&gt;
&lt;li&gt;一旦提交，对于数据库中数据的改变是永久性的，即使数据库发生故障也不能丢失已提交事务所完成的改变。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="Mysql" scheme="http://bilikings.top/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>一道题搞懂JVM类加载</title>
    <link href="http://bilikings.top/2021/03/26/%E4%B8%80%E9%81%93%E9%A2%98%E6%90%9E%E6%87%82JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD/"/>
    <id>http://bilikings.top/2021/03/26/%E4%B8%80%E9%81%93%E9%A2%98%E6%90%9E%E6%87%82JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD/</id>
    <published>2021-03-26T07:13:46.000Z</published>
    <updated>2021-03-26T07:16:45.727Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;一道题搞懂JVM类加载机制&quot;&gt;&lt;a href=&quot;#一道题搞懂JVM类加载机制&quot; class=&quot;headerlink&quot; title=&quot;一道题搞懂JVM类加载机制&quot;&gt;&lt;/a&gt;一道题搞懂JVM类加载机制&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton singleton = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Singleton();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value2 = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		value1++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		value2++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; singleton;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton2&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value2 = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton2 singleton2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Singleton2();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		value1++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		value2++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton2 &lt;span class=&quot;title&quot;&gt;getInstance2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; singleton2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Singleton singleton = Singleton.getInstance();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;Singleton1 value1:&amp;quot;&lt;/span&gt; + singleton.value1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;Singleton1 value2:&amp;quot;&lt;/span&gt; + singleton.value2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Singleton2 singleton2 = Singleton2.getInstance2();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;Singleton2 value1:&amp;quot;&lt;/span&gt; + singleton2.value1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;Singleton2 value2:&amp;quot;&lt;/span&gt; + singleton2.value2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="JVM" scheme="http://bilikings.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>中缀转后缀，逆波兰表达式</title>
    <link href="http://bilikings.top/2021/03/20/%E4%B8%AD%E7%BC%80%E8%BD%AC%E5%90%8E%E7%BC%80%EF%BC%8C%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://bilikings.top/2021/03/20/%E4%B8%AD%E7%BC%80%E8%BD%AC%E5%90%8E%E7%BC%80%EF%BC%8C%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-03-20T07:56:15.000Z</published>
    <updated>2021-03-20T07:58:55.571Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;中缀表达式转后缀表达式（逆波兰算法）过程&quot;&gt;&lt;a href=&quot;#中缀表达式转后缀表达式（逆波兰算法）过程&quot; class=&quot;headerlink&quot; title=&quot;中缀表达式转后缀表达式（逆波兰算法）过程&quot;&gt;&lt;/a&gt;中缀表达式转后缀表达式（逆波兰算法）过程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;从左到右遍历中缀表达式&lt;/li&gt;
&lt;li&gt;数字直接输出为后缀表达式一部分&lt;/li&gt;
&lt;li&gt;如果是符号，则判断与栈顶元素的优先级&lt;/li&gt;
&lt;li&gt;高于栈顶元素优先级直接入栈&lt;/li&gt;
&lt;li&gt;低于或等于栈顶优先级栈顶元素出栈并输出为后缀表达式一部分（注意这里是递归比较栈顶元素的优先级并出栈），最后将当前元素入栈&lt;br&gt;直到遍历完中缀表达式，最终输出后缀表达式&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="算法" scheme="http://bilikings.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>拓扑排序检验图中成环</title>
    <link href="http://bilikings.top/2021/03/16/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E6%A3%80%E9%AA%8C%E5%9B%BE%E4%B8%AD%E6%88%90%E7%8E%AF/"/>
    <id>http://bilikings.top/2021/03/16/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E6%A3%80%E9%AA%8C%E5%9B%BE%E4%B8%AD%E6%88%90%E7%8E%AF/</id>
    <published>2021-03-16T11:36:36.000Z</published>
    <updated>2021-03-16T11:36:54.620Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;拓扑排序&quot;&gt;&lt;a href=&quot;#拓扑排序&quot; class=&quot;headerlink&quot; title=&quot;拓扑排序&quot;&gt;&lt;/a&gt;拓扑排序&lt;/h1&gt;&lt;p&gt;拓扑排序判断是否图中成环&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算每一个节点的入度&lt;/li&gt;
&lt;li&gt;把入度为0的点加入队列&lt;/li&gt;
&lt;li&gt;把队列中的点从图中删除&lt;ul&gt;
&lt;li&gt;队列poll得到row，根据这个row变量他的所有连接节点，让这些点的入度-1&lt;/li&gt;
&lt;li&gt;如果这些点的入度成为0了，从图中删除，并加入队列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;判断这些点所有的入度是否都为0了，如存在不为0的就说明有环&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="算法" scheme="http://bilikings.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JAV中STW和CMS</title>
    <link href="http://bilikings.top/2021/03/14/JAV%E4%B8%ADSTW%E5%92%8CCMS/"/>
    <id>http://bilikings.top/2021/03/14/JAV%E4%B8%ADSTW%E5%92%8CCMS/</id>
    <published>2021-03-14T10:48:11.000Z</published>
    <updated>2021-03-14T10:49:25.997Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;JVM中的STW和CMS&quot;&gt;&lt;a href=&quot;#JVM中的STW和CMS&quot; class=&quot;headerlink&quot; title=&quot;JVM中的STW和CMS&quot;&gt;&lt;/a&gt;JVM中的STW和CMS&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Java中Stop-The-World机制简称STW&lt;/strong&gt;，是在执行垃圾收集算法时，Java应用程序的其他所有线程都被挂起（除了垃圾收集帮助器之外）。Java中一种全局暂停现象，全局停顿，所有Java代码停止，native代码可以执行，但不能与JVM交互；这些现象多半是由于gc引起。&lt;/p&gt;
&lt;p&gt;GC时的Stop the World(STW)是大家最大的敌人。但可能很多人还不清楚，除了GC，JVM下还会发生停顿现象。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://bilikings.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>mysql优化建议</title>
    <link href="http://bilikings.top/2021/03/01/mysql%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE/"/>
    <id>http://bilikings.top/2021/03/01/mysql%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE/</id>
    <published>2021-03-01T07:55:31.000Z</published>
    <updated>2021-03-01T07:59:13.867Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;SQL性能优化汇总&quot;&gt;&lt;a href=&quot;#SQL性能优化汇总&quot; class=&quot;headerlink&quot; title=&quot;SQL性能优化汇总&quot;&gt;&lt;/a&gt;SQL性能优化汇总&lt;/h1&gt;&lt;h3 id=&quot;库表设计规范&quot;&gt;&lt;a href=&quot;#库表设计规范&quot; class=&quot;headerlink&quot; title=&quot;库表设计规范&quot;&gt;&lt;/a&gt;库表设计规范&lt;/h3&gt;&lt;h4 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h4&gt;&lt;p&gt;云数据库 &lt;code&gt;MySQL&lt;/code&gt; 5.6 及以上版本不支持 &lt;code&gt;MyISAM&lt;/code&gt; 引擎和 Memory 引擎，若有 Memory 引擎的需求建议使用云数据库 &lt;code&gt;Redis&lt;/code&gt; 、&lt;code&gt;Memcached&lt;/code&gt;；自建数据库迁移到云数据库 &lt;code&gt;MySQL&lt;/code&gt; 时，会自动将 &lt;code&gt;MyISAM&lt;/code&gt; 引擎转换成 &lt;code&gt;InnoDB&lt;/code&gt; 引擎。&lt;br&gt;存在自增列的表，自增列上必须存在一个单独的索引，若在复合索引中，自增列必须置于第一位。&lt;br&gt;row_format必须保证为非 fixed。&lt;br&gt;每张表必须要有主键，即使选不出合适的列做主键，亦必须添加一个无意义的列做主键，&lt;code&gt;MySQL&lt;/code&gt; 第一范式标准 &lt;code&gt;InnoDB&lt;/code&gt; 辅助索引叶子节点会保存一份主键值，推荐用自增短列作为主键，降低索引所占磁盘空间提升效率，&lt;code&gt;binlog_format&lt;/code&gt;为 row 的场景下，批量删数据没主键会导致严重的主从延迟。&lt;br&gt;&lt;strong&gt;字段尽量定义为 NOT NULL 并加上默认值，NULL 会给 SQL 开发带来很多问题导致走不了索引，对 NULL 计算时只能用 IS NULL 和 IS NOT NULL 来判断。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Mysql" scheme="http://bilikings.top/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql_extra浅析</title>
    <link href="http://bilikings.top/2021/02/24/mysql-extra%E6%B5%85%E6%9E%90/"/>
    <id>http://bilikings.top/2021/02/24/mysql-extra%E6%B5%85%E6%9E%90/</id>
    <published>2021-02-24T07:42:26.000Z</published>
    <updated>2021-02-24T07:45:13.719Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Mysql-Explain-Extra的索引优化&quot;&gt;&lt;a href=&quot;#Mysql-Explain-Extra的索引优化&quot; class=&quot;headerlink&quot; title=&quot;Mysql_Explain_Extra的索引优化&quot;&gt;&lt;/a&gt;Mysql_Explain_Extra的索引优化&lt;/h1&gt;&lt;p&gt;在日常工作中，我们会有时会开慢查询去记录一些执行时间比较久的SQL语句，找出这些SQL语句并不意味着完事了，些时我们常常用到explain这个命令来查看一个这些SQL语句的执行计划，查看该SQL语句有没有使用上了索引，有没有做全表扫描，这都可以通过explain命令来查看。所以我们深入了解MySQL的基于开销的优化器，还可以获得很多可能被优化器考虑到的访问策略的细节，以及当运行SQL语句时哪种策略预计会被优化器采用。可以通过Extra的信息获取可以优化的建议&lt;/p&gt;</summary>
    
    
    
    
    <category term="Mysql" scheme="http://bilikings.top/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>代理模式浅析</title>
    <link href="http://bilikings.top/2021/02/13/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E6%B5%85%E6%9E%90/"/>
    <id>http://bilikings.top/2021/02/13/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E6%B5%85%E6%9E%90/</id>
    <published>2021-02-13T13:27:59.000Z</published>
    <updated>2021-02-26T01:07:18.452Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot;代理模式&quot;&gt;&lt;/a&gt;代理模式&lt;/h1&gt;&lt;h2 id=&quot;静态代理&quot;&gt;&lt;a href=&quot;#静态代理&quot; class=&quot;headerlink&quot; title=&quot;静态代理&quot;&gt;&lt;/a&gt;静态代理&lt;/h2&gt;&lt;p&gt;因为要搞清楚动态代理必须知道静态代理是什么玩意&lt;/p&gt;
&lt;p&gt;代理模式（Proxy Pattern)也叫委托模式，是一个使用率很高的模式&lt;/p&gt;
&lt;p&gt;目的是为其他对象提供一个代理以控制对这个对象的访问，或者在不改变原有功能代码的情况下做到添加新的功能&lt;/p&gt;
&lt;p&gt;代理之后要做到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用方式和原先一样&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;核心功能和原先一样&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代理模式提供以下三个角色&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;抽象主题（Subject）角色：该角色是真实主题和代理主题的共同接口，以便在任何可以使用真实主题的地方都可以使用代理主题。&lt;/li&gt;
&lt;li&gt; 代理主题（Proxy Subject）角色：也叫做委托类、代理类，该角色负责控制对真实主题的引用，负责在需要的时候创建或删除真实主题对象，并且在真实主题角色处理完毕前后做预处理和善后处理工作。&lt;/li&gt;
&lt;li&gt;真实主题（Real Subject）角色：该角色也叫做被委托角色、被代理角色，是业务逻辑的具体执行者。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://bilikings.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>泛型的具体含义与区别</title>
    <link href="http://bilikings.top/2021/02/05/%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%85%B7%E4%BD%93%E5%90%AB%E4%B9%89%E4%B8%8E%E5%8C%BA%E5%88%AB/"/>
    <id>http://bilikings.top/2021/02/05/%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%85%B7%E4%BD%93%E5%90%AB%E4%B9%89%E4%B8%8E%E5%8C%BA%E5%88%AB/</id>
    <published>2021-02-04T23:45:24.000Z</published>
    <updated>2021-02-04T23:45:42.697Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Object-T-的区别以及具体含义&quot;&gt;&lt;a href=&quot;#Object-T-的区别以及具体含义&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
    <category term="Java" scheme="http://bilikings.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>应用容器化</title>
    <link href="http://bilikings.top/2021/01/31/%E5%BA%94%E7%94%A8%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    <id>http://bilikings.top/2021/01/31/%E5%BA%94%E7%94%A8%E5%AE%B9%E5%99%A8%E5%8C%96/</id>
    <published>2021-01-31T00:40:28.000Z</published>
    <updated>2021-01-31T00:44:25.584Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;应用容器化&quot;&gt;&lt;a href=&quot;#应用容器化&quot; class=&quot;headerlink&quot; title=&quot;应用容器化&quot;&gt;&lt;/a&gt;应用容器化&lt;/h2&gt;&lt;p&gt;完整应用容器化的过程主要分为以下几个步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;编写应用代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建DockerFile，包括应用描述，依赖，以及如何运行这个应用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对这个DockerFile执行docker image build命令&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker build -t yourmirrorname .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;等待容器化完成&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;什么是dockerFile&quot;&gt;&lt;a href=&quot;#什么是dockerFile&quot; class=&quot;headerlink&quot; title=&quot;什么是dockerFile&quot;&gt;&lt;/a&gt;什么是dockerFile&lt;/h4&gt;&lt;p&gt;在代码目录当中，有个名称为Dockerfile的文件。这个文件包含了对当前应用的描述，并且能指导Docker完成镜像的构建&lt;/p&gt;
&lt;p&gt;Dockerfile 一般分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令，’#’ 为 Dockerfile 中的注释&lt;/p&gt;</summary>
    
    
    
    
    <category term="Docker" scheme="http://bilikings.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>排序与查找</title>
    <link href="http://bilikings.top/2020/12/17/%E6%8E%92%E5%BA%8F%E4%B8%8E%E6%9F%A5%E6%89%BE/"/>
    <id>http://bilikings.top/2020/12/17/%E6%8E%92%E5%BA%8F%E4%B8%8E%E6%9F%A5%E6%89%BE/</id>
    <published>2020-12-17T00:46:18.000Z</published>
    <updated>2020-12-17T00:48:04.931Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a&gt;选择排序&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;最没用的算法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一遍又一遍过滤这个数组，找到最小的放到前面来&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    
    <category term="数据结构与算法" scheme="http://bilikings.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://bilikings.top/2020/12/11/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://bilikings.top/2020/12/11/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-12-11T01:45:14.000Z</published>
    <updated>2020-12-11T01:45:37.298Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;1-单例模式&quot;&gt;&lt;a href=&quot;#1-单例模式&quot; class=&quot;headerlink&quot; title=&quot;1.单例模式&quot;&gt;&lt;/a&gt;1.单例模式&lt;/h3&gt;&lt;p&gt;   &lt;strong&gt;确保一个类只有一个实例&lt;/strong&gt;，而且自行实例化并向整个系统提供这个实例，该类只提供一个取得其对象的方法。&lt;/p&gt;
&lt;h4 id=&quot;饿汉式（静态常量）&quot;&gt;&lt;a href=&quot;#饿汉式（静态常量）&quot; class=&quot;headerlink&quot; title=&quot;饿汉式（静态常量）&quot;&gt;&lt;/a&gt;饿汉式（静态常量）&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;构造器私有化（防止new）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类的内部创建对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;向外暴露一个静态公共方法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Single&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//1构造器私有化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Single&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//内部创建实例对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Single instance =&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Single();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Single &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;优点：写法简单，类装载的时候实例化，避免了线程同步&lt;/li&gt;
&lt;li&gt;缺点：可能造成内存的浪费&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="设计模式" scheme="http://bilikings.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ消息队列</title>
    <link href="http://bilikings.top/2020/12/02/RabbitMQ%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <id>http://bilikings.top/2020/12/02/RabbitMQ%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</id>
    <published>2020-12-02T15:28:09.000Z</published>
    <updated>2020-12-02T15:30:47.020Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;RabbitMQ&quot;&gt;&lt;a href=&quot;#RabbitMQ&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ&quot;&gt;&lt;/a&gt;RabbitMQ&lt;/h1&gt;&lt;p&gt;消息队列可以发送 字符串、字节数组、序列化对象，需要对象实现序列化接口&lt;/p&gt;
&lt;p&gt;直接使用docker启动容器,于是就可以愉快的使用了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker run -d -p 5672:5672 -p 15672:15672 –name –restart=always rabbit rabbitmq&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;RabbitMQ构建基础生产者消费者模式&quot;&gt;&lt;a href=&quot;#RabbitMQ构建基础生产者消费者模式&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ构建基础生产者消费者模式&quot;&gt;&lt;/a&gt;RabbitMQ构建基础生产者消费者模式&lt;/h2&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://bilikings.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Zuul微服务网关</title>
    <link href="http://bilikings.top/2020/11/30/Zuul%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/"/>
    <id>http://bilikings.top/2020/11/30/Zuul%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/</id>
    <published>2020-11-30T06:05:25.000Z</published>
    <updated>2020-11-30T06:06:00.564Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;zuul路由网关&quot;&gt;&lt;a href=&quot;#zuul路由网关&quot; class=&quot;headerlink&quot; title=&quot;zuul路由网关&quot;&gt;&lt;/a&gt;zuul路由网关&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;为了解决客户端不同请求的服务&lt;/li&gt;
&lt;li&gt;解决跨域问题&lt;/li&gt;
&lt;li&gt;解决认证问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;客户端和服务端直连弊端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决客户端不同请求的服务，会增加客户端的复杂性&lt;/li&gt;
&lt;li&gt;存在跨域请求是，需要进行额外处理（转发，重定向）&lt;/li&gt;
&lt;li&gt;认证服务，各个辅助需要独立认证&lt;/li&gt;
&lt;li&gt;UI端和微服务端进行耦合&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Spring" scheme="http://bilikings.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Springboot核心注解详解</title>
    <link href="http://bilikings.top/2020/11/29/Springboot%E6%A0%B8%E5%BF%83%E6%B3%A8%E8%A7%A3%E8%AF%A6%E8%A7%A3/"/>
    <id>http://bilikings.top/2020/11/29/Springboot%E6%A0%B8%E5%BF%83%E6%B3%A8%E8%A7%A3%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-11-29T07:17:43.000Z</published>
    <updated>2020-11-29T07:18:43.330Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;核心注解&quot;&gt;&lt;a href=&quot;#核心注解&quot; class=&quot;headerlink&quot; title=&quot;核心注解&quot;&gt;&lt;/a&gt;核心注解&lt;/h2&gt;&lt;h3 id=&quot;spring相关&quot;&gt;&lt;a href=&quot;#spring相关&quot; class=&quot;headerlink&quot; title=&quot;spring相关&quot;&gt;&lt;/a&gt;spring相关&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;@Configuration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用于定义配置类，代替以前的xml文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;@ComponentScan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;包扫描组件，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;@Conditional&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为根据代码中的不同条件来注册bean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;@Import&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把没有被spring容器管理的类添加到Spring容器中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;@Component&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;带有这个注解的类被称为组件，为@Controller，@Service, @Respositoryu的共同注解（这三个注解也就是这个注解的特殊注解），&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Spring" scheme="http://bilikings.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Mysql数据字段类型</title>
    <link href="http://bilikings.top/2020/11/29/Mysql%E6%95%B0%E6%8D%AE%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B/"/>
    <id>http://bilikings.top/2020/11/29/Mysql%E6%95%B0%E6%8D%AE%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-11-29T07:11:29.000Z</published>
    <updated>2020-11-29T07:13:23.081Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型&quot;&gt;&lt;/a&gt;基本数据类型&lt;/h2&gt;&lt;p&gt;MySQL中定义数据字段的类型对你数据库的优化是非常重要的。&lt;/p&gt;
&lt;p&gt;MySQL支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Mysql" scheme="http://bilikings.top/tags/Mysql/"/>
    
  </entry>
  
</feed>
