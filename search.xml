<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JVM内存回收概述</title>
    <url>/2020/11/11/JVM%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><ol>
<li>Java引用的功能和意义</li>
<li>Java引用与内存回收之间的关系</li>
<li>Java对象在内存中的不同状态</li>
<li>软引用的作用和使用软引用的注意点</li>
<li>弱引用的作用和使用弱引用的注意点</li>
<li>虚引用的作用和使用虚引用的注意点</li>
<li>Java内存泄漏的原因</li>
<li>Java内存泄漏和C++内存泄漏的差别</li>
<li>Java垃圾回收机制的基本算法</li>
<li>堆内存的分代回收</li>
<li>Young代、Old代和Permanent代的各自存储的对象</li>
<li>Young代、Old代和Permanent代的特定及适用的回收算法</li>
<li>常见垃圾回收机制对堆内存的回收细节</li>
</ol>
<a id="more"></a>

<h2 id="对象在内存中的状态"><a href="#对象在内存中的状态" class="headerlink" title="对象在内存中的状态"></a>对象在内存中的状态</h2><p>对于GC来说，是否回收一个对象的标准在于，是否几率引用变量在引用这个对象。</p>
<p>基本上，可以把JVM内存中的对象引用理解成一种<strong>有向图</strong>，引用变量、对象都当成为有向图的顶点，将引用关系当成图的有向边，有向边总是从引用端指向被引用的Java对象，图的起始顶点是<strong>线程对象</strong>。</p>
<p>一个对象在堆内存中运行时，根据图中状态，可以有下面三种状态：</p>
<ol>
<li><p>可达状态：一个状态在被创建之后，有一个以上的变量引用他，在有向图的起始顶点可以导航到这个对象，那么他就处于可达状态</p>
</li>
<li><p>可恢复状态：如果成行中不在有任何的引用变量引用他，那么就先进入可恢复状态，有向图顶点不可达。</p>
</li>
<li><p>不可达状态：当系统调用finalize方法仍然不能让可恢复状态称为可达状态，那么这个对象就永久的失去引用，成为不可达状态，这时才会真正的垃圾回收。</p>
<h2 id="对象的引用类型"><a href="#对象的引用类型" class="headerlink" title="对象的引用类型"></a>对象的引用类型</h2><p>​        对于垃圾回收机制来说，判断一个对象是否可以进行回收的标准就在于这个对象是不是被引用，所以引用是JVM进行内存管理的一个重要工具，</p>
<p>Java的4个引用类型如下</p>
<ol>
<li>强引用</li>
<li>软引用</li>
<li>弱引用</li>
<li>虚引用</li>
</ol>
</li>
</ol>
<h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><p>这是Java程序中最常见的引用方式，程序创建一个对象，并把这个对象赋给一个引用变量，这个引用变量就是强引用。</p>
<p>由于JVM肯定不会回收强引用所引用的Java对象，因此强引用是造成Java内存泄漏的主要原因之一。</p>
<h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h3><p>软引用需要通过<code>SoftReference</code>类来实现，当一个对象只具有软引用时，它有可能被垃圾回收机制回收。对于只有软引用的对象而言，当系统内存空间足够时，它不会被系统回收，程序也可使用该对象；当系统内存空间不足时，系统将会回收它。</p>
<p>当系统内存充足时，<code>SoftReference</code>引用和强引用并没有太大的区别。当程序使用强引用时，无论系统堆内存如何紧张，JVM垃圾回收机制都不会回收被强引用所引用的Java对象，因此最后导致程序因内存不足而中止。但如果程序把强引用改为使用软引用，就可完全避免这种情况，这就是软引用的优势所在。</p>
<h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><p>弱引用和软引用很像，但弱引用的引用级别更低。对于只有弱引用的对象而言，当系统垃圾回收机制运行时，不管系统内存是否足够，总会回收该对象所占用的内存。</p>
<h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><p>软引用和弱引用可以单独使用，但虚引用不能单独使用，单独使用虚引用没有太大的意义。虚引用的主要作用就是跟踪对象被垃圾回收的状态，程序可以通过检查与虚引用关联的引用队列中是否已经包含指定的虚引用，从而了解虚引用所引用对象是否即将被回收。</p>
<p>与软引用和弱引用不同的是，虚引用在对象被释放之前，将把它对应的虚引用添加到它的关联的引用队列中，这使得可以在对象被回收之前采取行动。</p>
<p>虚引用通过<code>PhantomReference</code>类实现，它完全类似于<strong>没有引用</strong>。虚引用对对象本身没有太大影响，对象甚至感觉不到虚引用的存在。</p>
<p>虚引用主要用于<strong>跟踪对象被垃圾回收的状态</strong>，虚引用不能单独使用，虚引用必须和引用队列（<code>ReferenceQueue</code>）联合使用。</p>
<h2 id="Java内存泄漏"><a href="#Java内存泄漏" class="headerlink" title="Java内存泄漏"></a>Java内存泄漏</h2><p>程序运行过程中会不断地分配内存空间，那些不再使用的内存空间应该即时回收它们，从而保证系统可以再次使用这些内存，如果存在无用的内存没有被回收回来，那就是<strong>内存泄漏</strong>。</p>
<p>java中的内存泄漏主要针对那些<strong>无用却可达</strong>的对象，而c++中针对的是<strong>无用</strong>的对象，需要程序员手动释放。</p>
<p>对于Java程序而言，只要它们一直处于可达状态，垃圾回收机制就不会回收它们—即使它们对于程序来说已经变成了垃圾（程序再也不需要它们了），而对于垃圾回收机制来说，它们还不是垃圾（还处于可达状态），因此不能回收。</p>
<h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><p>主要完成两件事情</p>
<ul>
<li>跟踪并监控每个Java对象，当一个对象处于不可达状态是，回收对象分配的内存</li>
<li>清理内存分配、回收是产生的内存碎片</li>
</ul>
<h3 id="基本算法"><a href="#基本算法" class="headerlink" title="基本算法"></a>基本算法</h3><p>实际上，垃圾回收机制不可能实时检测到每个Java对象的状态，因此当一个对象失去引用后，它也不会被立即回收，只有等垃圾回收运行时才会被回收。</p>
<p>设计思路：</p>
<ul>
<li>串行回收与并行回收</li>
<li>并发执行和引用程序停止</li>
<li>压缩，不压缩，复制<ul>
<li>复制：将堆内分成两个相同空间，从根（类似于前面介绍的有向图的起始顶点）开始访问每一个关联的可达对象，将空间A的可达对象全部复制到空间B，然后一次性回收整个空间A。</li>
<li>标记清除：经典的不压缩算法，垃圾回收器先从根开始访问所有可达对象，将它们标记为可达状态，然后再遍历一次整个内存区域，把所有没有标记为可达的对象进行回收处理。</li>
<li>标记压缩：垃圾回收器先从根开始访问所有可达对象，将它们标记为可达状态。接下来垃圾回收器会将这些活动对象搬迁在一起，这个过程也被称为内存压缩，然后垃圾回收机制再次回收那些不可达对象所占用的内存空间，这样就避免了回收产生的内存碎片。有3个阶段：mark（标识可达对象）、sweep（清除）、compact（压缩）。<ul>
<li>在 mark阶段，回收器会识别出哪些对象仍然是可达的</li>
<li>在 sweep阶段将会回收不可达对象所占用的内存</li>
<li>在compact阶段回收器执行<code>slidingcompaction</code>，把活动对象往Old代的前端启动，而在尾部保留一块连续的空间，以便下次为新对象分配内存空间。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="内存分代回收"><a href="#内存分代回收" class="headerlink" title="内存分代回收"></a>内存分代回收</h3><ul>
<li> Young（年轻代）：采用复制算法</li>
<li> Old（老年代）：采用标记压缩算法</li>
<li> Permanent（永久代）</li>
</ul>
<p>在不同的代中，采用不同的回收算法</p>
<ul>
<li>绝大对数的对象不会被长时间引用，这些对象在其Young期间就会被回收</li>
<li>很老的对象（生存时间很长）和很新的对象（生存时间很短）之间很少存在相互引用的情况。</li>
</ul>
<h4 id="young代"><a href="#young代" class="headerlink" title="young代"></a>young代</h4><p>Young代由1个Eden区和2个Survivor区构成。绝大多数对象先分配到Eden区。同一时间2个Survivor空间中有一个用来保存对象，而另一个是空的，用来在下次垃圾回收时保存Young代中的对象。</p>
<p>Eden和Survivor的比例通过<code>-XX:SurvivorRatio</code>附加选项来设定，默认为32。</p>
<h4 id="old代"><a href="#old代" class="headerlink" title="old代"></a>old代</h4><p>执行垃圾回收的频率无需太高，久经考验的对象很少会死掉</p>
<p>每次 Old的垃圾回收需要更长的时间</p>
<h4 id="permanent代"><a href="#permanent代" class="headerlink" title="permanent代"></a>permanent代</h4><p>主要用于转载Class，方法等信息，默认为64M</p>
<p>通常不会对这里面的对象执行垃圾回收</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaJUC(一)——线程</title>
    <url>/2020/11/15/JavaJUC-%E4%B8%80-%E2%80%94%E2%80%94%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>进程是系统资源分配的基本单位</p>
<p>线程是cpu进行调度的基本单位</p>
<a id="more"></a>

<h2 id="线程同步控制"><a href="#线程同步控制" class="headerlink" title="线程同步控制"></a>线程同步控制</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumer</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        <span class="keyword">boolean</span> available = <span class="keyword">false</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Ticket</span><span class="params">(<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.size = size;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span></span>&#123;</span><br><span class="line">        Ticket t = <span class="keyword">new</span> Tickets(<span class="number">10</span>);</span><br><span class="line">        Thread save = <span class="keyword">new</span> Comsumer(t);</span><br><span class="line">        save.start();</span><br><span class="line">        Thread sell = <span class="keyword">new</span> Producer(t);</span><br><span class="line">        sell.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Ticket t =<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Tickets t)</span></span>&#123;<span class="keyword">this</span>.t=t;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(t.numble&lt;t.size)&#123;</span><br><span class="line">            sout(<span class="string">&quot;Producer puts ticket&quot;</span>+(++t.number));</span><br><span class="line">            t.available = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comsumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Ticket t = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Comsumer</span><span class="params">(Ticket t)</span></span>&#123;<span class="keyword">this</span>.t = t;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; t.size)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t.available == <span class="keyword">true</span> &amp;&amp; i &lt;= t.number)</span><br><span class="line">                sout(<span class="string">&quot;comsumer buy ticket&quot;</span>+(++i));</span><br><span class="line">            <span class="keyword">if</span>(i&gt;t.number)</span><br><span class="line">                t.available =<span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="线程同步关键字-synchronized-实现互斥"><a href="#线程同步关键字-synchronized-实现互斥" class="headerlink" title="线程同步关键字 synchronized 实现互斥"></a>线程同步关键字<font color="#666600"> <strong>synchronized</strong></font> 实现互斥</h2><ol>
<li><p>用于指定需要同步的代码段或方法，也就是监视区</p>
</li>
<li><p>实现一个锁的交互</p>
<ul>
<li>synchronized(对象){code}</li>
</ul>
</li>
<li><p>功能是：先判断对象锁是否存在，如果存在就获得锁，之后执行他的代码段；如果被其他拿走，就等待，直到获得锁</p>
</li>
<li><p>将synchronized内的代码变为原子操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Ticket t =<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Tickets t)</span></span>&#123;<span class="keyword">this</span>.t=t;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(t.numble&lt;t.size)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(t)&#123;</span><br><span class="line">            sout(<span class="string">&quot;Producer puts ticket&quot;</span>+(++t.number));</span><br><span class="line">            t.available = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>只能同步方法，不能同步变量</li>
<li>要明确对什么对象同步</li>
<li>类可以有同步方法和非同步方法，非同步方法可以被多个线程自由访问</li>
<li>两个线程用同一实例来调用synchronized方法，一次只能一个线程执行，另一个要等待锁</li>
</ul>
<h2 id="线程的等待——wait-方法"><a href="#线程的等待——wait-方法" class="headerlink" title="线程的等待——wait()方法"></a>线程的等待——wait()方法</h2><ul>
<li><p>wait()也是阻塞和等待，但是需要notify来唤醒。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(available)</span><br><span class="line">        <span class="keyword">try</span>&#123;wait();&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Producer puts ticket&quot;</span>+(++number));</span><br><span class="line">        available = <span class="keyword">true</span>;</span><br><span class="line">    	notify();</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!available)</span><br><span class="line">        <span class="keyword">try</span>&#123;wait();&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">            <span class="keyword">if</span>(available &amp;&amp; i &lt;= number)</span><br><span class="line">                System.out.println(<span class="string">&quot;consumer buy ticket&quot;</span>+(++i));</span><br><span class="line">            <span class="keyword">if</span>(i == number)</span><br><span class="line">                available =<span class="keyword">false</span>;</span><br><span class="line">    	notify();</span><br><span class="line">        <span class="keyword">if</span>(number == size) number = size + <span class="number">1</span>；<span class="comment">//number大于size表示售票结束</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="线程的调度"><a href="#线程的调度" class="headerlink" title="线程的调度"></a>线程的调度</h2></li>
</ol>
<p>Runnable队列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ex_13</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        TestThread[] runners = <span class="keyword">new</span> TestThread[<span class="number">2</span>];<span class="comment">//创建一个容量为2的数组存放线程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">2</span>; i++) runners[i] = <span class="keyword">new</span> testThread(i);<span class="comment">//建立线程</span></span><br><span class="line">        runners[<span class="number">0</span>].setPriority(<span class="number">2</span>);<span class="comment">//设置优先级为2</span></span><br><span class="line">        runners[<span class="number">1</span>].setPriority(<span class="number">3</span>);<span class="comment">//设置优先级为3</span></span><br><span class="line">        <span class="keyword">for</span>(a:runners) a.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tick = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="function">pubulic <span class="title">TestTread</span><span class="params">(<span class="keyword">int</span> i )</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(tick&lt;<span class="number">400000</span>)&#123;</span><br><span class="line">            tick++;</span><br><span class="line">            <span class="keyword">if</span>((tike%<span class="number">50000</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                sout(<span class="string">&quot;Thread # &quot;</span>+ num+ <span class="string">&quot; , tick=&quot;</span> + tick);</span><br><span class="line">                yield();<span class="comment">//放弃执行权（就是让java线程调度器去找同优先级的线程，要是没有就继续执行）</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><ul>
<li>不可变对象</li>
<li>绝对线程安全</li>
<li>相对线程安全</li>
<li>线程兼容与对立<ul>
<li>线程兼容：对象本身不是线程安全的，但是可以通过在调用端正确的使用同步手段了保证对象在并发的环境中可以安全使用</li>
<li>线程对立：无论是否采取同步措施，都无法在多线程的环境在并发使用的代码</li>
</ul>
</li>
</ul>
<h3 id="互斥同步"><a href="#互斥同步" class="headerlink" title="互斥同步"></a>互斥同步</h3><ul>
<li>Synchonized为原生语法层面的互斥锁，ReentrantLook为API层面的互斥锁</li>
</ul>
<ol>
<li><p>使用 synchronized()             //会在.class文件里面生成monitorenter和monitorend</p>
</li>
<li><p>重入锁ReentrantLook         //（<strong>性能好</strong>）</p>
<ul>
<li><p>可实现：等待可中断、公平锁、锁可以绑定多个条件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent,lock.ReentrantLOck;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferInerruptibly</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">            sout(<span class="string">&quot;写入数据到buff&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(;;)&#123;<span class="comment">//模拟处理很长时间</span></span><br><span class="line">                <span class="keyword">if</span>(System.currentTimeMillis() - startTime&gt;integer.MAX_VALUE)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sout(<span class="string">&quot;write end!&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;<span class="comment">//作为异常处理的一部分之后的语句段一定会执行，这里就是不管有没有异常都可以解锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">   lock.lockInerruptibly();<span class="comment">//这里可以相应中断</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            sout(<span class="string">&quot;从这里读取数据&quot;</span>)；</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h3 id="非阻塞同步"><a href="#非阻塞同步" class="headerlink" title="非阻塞同步"></a>非阻塞同步</h3><ul>
<li><p>阻塞同步：这是一种悲观的并发策略，也是互斥同步</p>
</li>
<li><p>非阻塞同步：基于冲突检测的乐观并发策略，先操作，如果没有其它线程怎样数据，则操作成功；否则就是产生了冲突，需要不断重试了直到成功的策略，不需要把线程挂起。</p>
<ul>
<li><p>在AtommicInteger这个类来实现的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        count.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在使用AtomicInteger之后，不需要加锁也能线程安全</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="无同步方案"><a href="#无同步方案" class="headerlink" title="无同步方案"></a>无同步方案</h3><ul>
<li><p>可重入代码</p>
</li>
<li><p>线程本地存储</p>
<p>代码中数据必须与其他代码共享，试着将这些需要共享数据的代码放到同一个线程中去执行，就能将可见范围限定在同一个线程内，这样无需同步也能保证数据之间不出现数据征用问题</p>
</li>
</ul>
<h3 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h3><ul>
<li>自旋锁</li>
<li>自适应锁</li>
<li>锁消除</li>
<li>锁粗化</li>
<li>偏向锁</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaJUC(二)——Concurrent包</title>
    <url>/2020/11/15/JavaJUC-%E4%BA%8C-%E2%80%94%E2%80%94Concurrent%E5%8C%85/</url>
    <content><![CDATA[<h1 id="java-util-concurrent"><a href="#java-util-concurrent" class="headerlink" title="java.util.concurrent"></a>java.util.concurrent</h1><p>这是一个jdk1.5之后的一个有关多线程的包</p>
<a id="more"></a>

<h2 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h2><p>内存可见性：不同线程对一个共享数据进行操作的时候，都是先把数据读到自己方法区缓存中去，所以当线程1更改了数据时在 ，线程2是对这个更改的数据不可见的，所以在声明这个数据时候，可以添加一个关键字<code>volatile</code>，保证某一个线程在更改这个数据时候，会马上把结果返回主存中（另一个效率很低的方法是每次指向前进行同步，加<code>synchronized</code>互斥   锁）</p>
<p>volatile使用底层的内存栅栏</p>
<h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h2><p>java.util.concurrent.atomic：</p>
<ul>
<li>使用volatile保证内存可见性</li>
<li>CAS（compare-And-Swap）算法保证数据原子性<ul>
<li>cas有三个操作数：<ol>
<li>内存值 V</li>
<li>预估值A</li>
<li>更新值B</li>
</ol>
</li>
<li>当且仅当V==A时，V=B，else，不做任何操作</li>
</ul>
</li>
</ul>
<p>i++不是原子性的，AtomicXXX（比如：AtomicInteger）类的 getAndIncrement()解决了这个问题，</p>
<p>i–就使用getAndDecrement()解决</p>
<h2 id="同步容器类"><a href="#同步容器类" class="headerlink" title="同步容器类"></a>同步容器类</h2><p>ConcurrentHashMap采用锁分段机制【Concurrent：并存的】</p>
<h2 id="Callable接口"><a href="#Callable接口" class="headerlink" title="Callable接口"></a>Callable接口</h2><p>可以有返回值</p>
<p>结果需要用FutureTask接收</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">    DemoThread demoThread &#x3D; new DemoThread();</span><br><span class="line">    FutureTask&lt;Integer&gt; futureTask &#x3D; new FutureTask&lt;&gt;(demoThread);</span><br><span class="line">    new Thread(futureTask).start();</span><br><span class="line">    final Integer sum &#x3D; futureTask.get();</span><br><span class="line">    System.out.println(sum);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoThread</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span>[] range = IntStream.range(<span class="number">1</span>, <span class="number">100</span>).toArray();</span><br><span class="line">        <span class="keyword">for</span> (Integer i:range) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="lock同步锁"><a href="#lock同步锁" class="headerlink" title="lock同步锁"></a>lock同步锁</h2><p>ReentrantLock，这是一个显示的锁，需要通过lock()方法上锁，用unlock()释放锁。 </p>
<h3 id="自动释放锁"><a href="#自动释放锁" class="headerlink" title="自动释放锁"></a>自动释放锁</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoLock</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AutoLock</span><span class="params">(Lock lock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lock = lock;</span><br><span class="line">        lock.lock();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="生成者和消费者"><a href="#生成者和消费者" class="headerlink" title="生成者和消费者"></a>生成者和消费者</h2><ul>
<li><p>使用wait（）让线程等待</p>
</li>
<li><p>notify()/notifyAll()唤醒其他wait的线程</p>
</li>
<li><p>直接使用会造成虚假唤醒，所以应该总是使用在循环中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(obj)&#123;</span><br><span class="line">    <span class="keyword">while</span> ()&#123;</span><br><span class="line">        obj.wait();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><p>ReadWriteLock</p>
<ul>
<li><strong>解决了写写/读写需要互斥而读读不需要互斥的操作</strong></li>
</ul>
<h2 id="线程8锁"><a href="#线程8锁" class="headerlink" title="线程8锁"></a>线程8锁</h2><ul>
<li>非静态方法的锁默认为thhis，静态方法的锁默认为对应的Class实例</li>
<li>某一个时刻内，只有一个线程持有锁，无论几个方法 </li>
</ul>
<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>提供了一个线程队列。队列中保存着所有的等待状态的线程，避免了创建和销毁的开销，提高了性能</p>
<h3 id="interface-Executor"><a href="#interface-Executor" class="headerlink" title="interface Executor"></a>interface Executor</h3><ul>
<li><p>ExecutorService newFixsdThreadPool():创建固定大小的线程池</p>
</li>
<li><p>ExecutorService newCachedThreadPool()  创建缓存线程池，可以根据需要自动更改数量</p>
</li>
<li><p>ExecutorService newSingleThreadExecutor() 创建单个线程池，这里面只有一个线程</p>
</li>
<li><p>ScheduledExecutorService newScheduledThreadPool() 创建固定大小的线程，可以延时或者定时执行任务</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建线程池</span></span><br><span class="line">ExecutorService pool =Executor.newFixsdThreadPool();</span><br><span class="line">ThreadDemo task  = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line"><span class="comment">//为线程池中的线程分配任务</span></span><br><span class="line">pool.submit(task);</span><br><span class="line"><span class="comment">//关闭线程池</span></span><br><span class="line">pool.shutdown();</span><br></pre></td></tr></table></figure>

<h3 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h3><h2 id="Fork-Join框架"><a href="#Fork-Join框架" class="headerlink" title="Fork/Join框架"></a>Fork/Join框架</h2><p>在必要的情况下，把一个大任务拆分（fork）成若干个小任务（拆到不可以在拆的时候），再把一个个小任务运算的结果进行join汇总</p>
<p>在stream处理中，要是开启多线程，内部使用此框架</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发编程笔记(1)——线程安全性</title>
    <url>/2020/11/17/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0-1-%E2%80%94%E2%80%94%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7/</url>
    <content><![CDATA[<blockquote>
<p>什么是线程</p>
</blockquote>
<ul>
<li>线程也成为轻量级进程</li>
<li>进程是操作系统资源分配的最小单位，线程是cpu调度的最小单位</li>
<li>同一个进程中的线程是都将共享进程的内存地址空间，因此这些形成都可以访问相同的变量并在一个堆上分配对象</li>
</ul>
<h2 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h2><p>如果多个线程访问同一个可变的状态变量时，没有使用合适的同步，程序就出现错误，解决方案：</p>
<ol>
<li>不在线程中共享这个状态变量</li>
<li>把状态变量修改为不可变的变量</li>
<li>在访问状态时候使用同步</li>
</ol>
<a id="more"></a>

<p><strong>安全性</strong>是由<strong>正确性</strong>决定的，正确性的定义是某个类和其行为完全一致，在良好的规范中，通常会定义各种不变的条件来约束对象的状态，以及描述对象操作的结果的后验状态</p>
<ul>
<li>当多个线程访问一个类时，不管运行时采用何种调度方法或者这些线程如何交替进行，并且在主代码中不用任何额外的同步或者协同，这个类都会表现出正确的行为，这个类就是线程安全的（线程安全类就是在并发环境下和单线程环境中都不会被破坏的类）</li>
<li><strong>一个无状态的对象一定是线程安全的</strong>：他既不包含任何域，也没有对其他类中域的引用。他的操作仅仅操作他的线程栈上的局部变量</li>
</ul>
<h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><blockquote>
<p>count++并不是一个操作，而是包含了“读取——修改——写入”的操作序列，他的结果依赖于之前的状态。</p>
</blockquote>
<h4 id="竞态条件"><a href="#竞态条件" class="headerlink" title="竞态条件"></a>竞态条件</h4><p>在并发编程中，这种由于不恰当的执行时序而出现不同结果是一种非常重要的情况。</p>
<p>由于存在多个竞态条件，是结果变得不可靠</p>
<ul>
<li><p>在单例中，有可能线程在A创建对象时候，线程B也开始调用这个方法创建对象，按理来说应该返回同一个对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LasyInit</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LasyInit instance;</span><br><span class="line">    <span class="function">priveate <span class="title">LasyInit</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> LasyInit getInstance&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;<span class="comment">//A执行到这时候开始创建，B还没开始</span></span><br><span class="line">            instance = <span class="keyword">new</span> LasyInit();<span class="comment">//A开始创建了，B这时候进入了if(instance==null)，发现为false，也开始创建新对象。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="复合操作"><a href="#复合操作" class="headerlink" title="复合操作"></a>复合操作</h4><p>要避免静态条件，必须确保其他线程只能在修改操作之前或者之后读取或者修改，而而不是在修改状态的过程中。</p>
<blockquote>
<p>可以使用原子类型<code>AtomicXXX</code>类的<code>incrementAndGet()</code>方法代替count++</p>
</blockquote>
<h4 id="内置锁"><a href="#内置锁" class="headerlink" title="内置锁"></a>内置锁</h4><ul>
<li><p>每个java对象都有一个实现同步的锁，这些锁称为内置锁（或监视器）。</p>
</li>
<li><p>JAVA的内置锁相当于一个互斥锁，就是一个线程只能持有这个锁。</p>
</li>
</ul>
<h4 id="重入锁"><a href="#重入锁" class="headerlink" title="重入锁"></a>重入锁</h4><p>每一个线程请求一个其他线程所持有的锁的是时候，发出请求的线程就会block，而内置锁是可重入的，意思是这线程再次请求一个由他自己所已经持有的锁的时候，这个请求就会成功。</p>
<blockquote>
<p>获取锁的操作粒度是“线程”，而不是”调用“，</p>
</blockquote>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda</title>
    <url>/2020/11/11/Lambda/</url>
    <content><![CDATA[<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><ul>
<li>java中，经常遇到一大堆单方法接口，即一个接口只定义了一个方法<ul>
<li>Comparator（比较器）</li>
<li>Runnable</li>
<li>Callable</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arr =&#123;&#125;;</span><br><span class="line">Arrays.sort(arr,<span class="keyword">new</span> Comparator&lt;String&gt;()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1,String s2 )</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s1.compareTo(s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这样写，非常繁琐</p>
<p>java8开始用Lambda了替换单方法接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(arr,(s1,s2)-&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> s1.compare(s2);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>Lambda表达式值需要写出方法定义，参数类型可以省略</p>
<p>只有一行return代码可以写成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(arr,(s1,s2)-&gt;s1.compare(s2));</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="FunctionalInterface-功能接口"><a href="#FunctionalInterface-功能接口" class="headerlink" title="FunctionalInterface(功能接口)"></a>FunctionalInterface(功能接口)</h3><p>我们把只定义了单方法的接口称之为<code>FunctionalInterface</code>，用注解<code>@FunctionalInterface</code>标记。例如，<code>Callable</code>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">     <span class="function">V <span class="title">call</span><span class="params">()</span> throw Exception</span>;</span><br><span class="line"> &#125;    </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Callable mycallable =()-&gt;&#123;</span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Comparator</code>接口：</p>
<p>虽然<code>Comparator</code>接口有很多方法，但只有一个抽象方法<code>int compare(T o1, T o2)</code>，其他的方法都是<code>default</code>方法或<code>static</code>方法。另外注意到<code>boolean equals(Object obj)</code>是<code>Object</code>定义的方法，不算在接口方法内。因此，<code>Comparator</code>也是一个<code>FunctionalInterface</code>。</p>
<p>接收<code>FunctionalInterface</code>作为参数的时候，可以把实例化的匿名类改写为Lambda表达式，能大大简化代码。</p>
<h3 id="Lambda方法引用"><a href="#Lambda方法引用" class="headerlink" title="Lambda方法引用"></a>Lambda方法引用</h3><p>除了Lambda表达式，我们还可以直接传入方法引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       String[] arr =<span class="keyword">new</span> String&#123;<span class="string">&quot;A&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">        Arrays.sort(arr,Main::cmp);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cmp</span><span class="params">(String s1,String s2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s1.compareTo(s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接传入一个静态方法，输出也是一个函数方法。</p>
<p>所谓方法引用，就是方法的签名和接口正好一致，就可以直接传入方法引用</p>
<p>因为<code>Comparator</code>接口定义的方法是<code>int compare(String, String)</code>，和静态方法<code>int cmp(String, String)</code>相比，除了方法名外，方法参数一致，返回类型相同，因此，我们说两者的方法签名一致，可以直接把方法名作为Lambda表达式传入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(array, String::compareTo);<span class="comment">//只看参数类型和返回类型，不看方法名称，也不看类的继承关系。</span></span><br></pre></td></tr></table></figure>

<h4 id="构造方法引用"><a href="#构造方法引用" class="headerlink" title="构造方法引用"></a>构造方法引用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把泛型对应上就是方法签名<code>Person apply(String)</code>，即传入参数<code>String</code>，返回类型<code>Person</code>。而<code>Person</code>类的构造方法恰好满足这个条件，因为构造方法的参数是<code>String</code>，而构造方法虽然没有<code>return</code>语句，但它会隐式地返回<code>this</code>实例，类型就是<code>Person</code>，因此，此处可以引用构造方法。构造方法的引用写法是<code>类名::new</code>，因此，此处传入<code>Person::new</code>。</p>
<ul>
<li>符合方法签名的实例方法（实例类型被看做第一个参数类型）；</li>
<li>符合方法签名的构造方法（实例类型被看做返回类型）。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> atom.hu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> lambda</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/18 20:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Use1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">filter</span><span class="params">(List&lt;T&gt; list , Predicate&lt;T&gt; p)</span></span>&#123;</span><br><span class="line">        List&lt;T&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(T s:list)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.test(s))&#123;</span><br><span class="line">                res.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T,R&gt; <span class="function">List&lt;R&gt; <span class="title">map</span> <span class="params">(List&lt;T&gt; list, Function&lt;T,R&gt; f)</span></span>&#123;</span><br><span class="line">        List&lt;R&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(T s:list)&#123;</span><br><span class="line">            res.add(f.apply(s));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;String&gt; to = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        to.add(<span class="string">&quot;sdad&quot;</span>);</span><br><span class="line">        to.add(<span class="string">&quot;sjfa&quot;</span>);</span><br><span class="line">        to.add(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.out.println(to.toString());</span><br><span class="line">        List&lt;String&gt; non = filter(to,s-&gt;!s.isEmpty());</span><br><span class="line">        System.out.println(non.toString());</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; l = map(Arrays.asList(<span class="string">&quot;lambda&quot;</span>,<span class="string">&quot;in&quot;</span>,<span class="string">&quot;Action&quot;</span>), String::length);</span><br><span class="line">        System.out.println(l);</span><br><span class="line"></span><br><span class="line">        Callable&lt;Integer&gt; c=()-&gt;<span class="number">43</span>;</span><br><span class="line">        System.out.println(c.call().intValue());</span><br><span class="line"></span><br><span class="line">        Runnable stringRunnable = ()-&gt; System.out.println(<span class="string">&quot;stringRun&quot;</span>);</span><br><span class="line">        stringRunnable.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty</title>
    <url>/2020/11/11/Netty/</url>
    <content><![CDATA[<h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><p>可以做的事情：</p>
<ol>
<li>所谓rpc通讯的框架、协议、库，实现远程过程调用，基于socket的方式</li>
<li>可以作为长连接实现客户端与服务器的通讯，基于websocket</li>
<li>作为http服务器，类似于jetty，tomcat等等，此时说采取的编程模型不遵循servlet的规范，而是自实现</li>
</ol>
<p>tcp/ip—&gt;jdk原生io—&gt;NIO—&gt;netty</p>
<h3 id="Netty是什么"><a href="#Netty是什么" class="headerlink" title="Netty是什么"></a>Netty是什么</h3><ol>
<li>是一个异步的、基于事件驱动的网络应用框架</li>
<li>目的是开发高性能，高可靠的网络IO程序</li>
<li>主要针对在TCP协议下，面向Clients端的高并发应用</li>
<li>是对NIO框架的封装实现</li>
<li>是长连接的，保持大量数据传输的应用</li>
</ol>
]]></content>
      <tags>
        <tag>NIO</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Stream</title>
    <url>/2020/11/11/Stream/</url>
    <content><![CDATA[<h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><ul>
<li>流式API</li>
</ul>
<p>这个<code>Stream</code>不同于<code>java.io</code>的<code>InputStream</code>和<code>OutputStream</code>，它代表的是任意Java对象的序列。两者对比如下</p>
<table>
<thead>
<tr>
<th></th>
<th>java.io</th>
<th>java.util.steam</th>
</tr>
</thead>
<tbody><tr>
<td>存储</td>
<td>顺序读写的byte或者char</td>
<td>顺序输出的任意Java对象实例</td>
</tr>
<tr>
<td>用途</td>
<td>序列化文件或者网络</td>
<td>内存计算/业务逻辑</td>
</tr>
</tbody></table>
<a id="more"></a>

<p>这个<code>Stream</code>和<code>List</code>也不一样，<code>List</code>存储的每个元素都是已经存储在内存中的某个Java对象，而<code>Stream</code>输出的元素可能并没有预先存储在内存中，而是实时计算出来的。</p>
<p>如果我们要表示一个全体自然数的集合，显然，用<code>List</code>是不可能写出来的，因为自然数是无限的，内存再大也没法放到<code>List</code>中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">    Stream&lt;Integer&gt; streamNum = createStream();<span class="comment">//不计算</span></span><br><span class="line">    Stream&lt;Integer&gt; SNxN =streamNum.map(Queues::multiply).limit(<span class="number">3</span>);<span class="comment">//不计算</span></span><br><span class="line">    SNxN.forEach(System.out::println);<span class="comment">//计算</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Integer&gt; <span class="title">createStream</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">multiply</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n*n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>惰性计算的特点是：一个<code>Stream</code>转换为另一个<code>Stream</code>时，实际上只存储了转换规则，并没有任何计算发生。</p>
<p>一个流在使用一次之后会销毁掉。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Use2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">        Stream&lt;Integer&gt; s = list.stream();</span><br><span class="line">        s.map((x)-&gt;x*<span class="number">2</span>).forEach(System.out::print);</span><br><span class="line">        <span class="comment">//下面这句会抛出异常，流已经被使用过了 java.lang.IllegalStateException: stream has already been operated upon or closed</span></span><br><span class="line">        s.map((x)-&gt;x*<span class="number">2</span>).forEach(System.out::print);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="创建Stream"><a href="#创建Stream" class="headerlink" title="创建Stream"></a>创建Stream</h3><ul>
<li><p>创建<code>Stream</code>最简单的方式是直接用<code>Stream.of()</code>静态方法，传入可变参数即创建了一个能输出确定元素的<code>Stream</code>。<strong>虽然这种方式基本上没啥实质性用途，但测试的时候很方便。</strong></p>
</li>
<li><p>基于数组或Collection</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream1 = Arrays.stream(<span class="keyword">new</span> String[] &#123; <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span> &#125;);</span><br><span class="line">Stream&lt;String&gt; stream2 = List.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>).stream();</span><br></pre></td></tr></table></figure>

<p>把数组变成<code>Stream</code>使用<code>Arrays.stream()</code>方法。对于<code>Collection</code>（<code>List</code>、<code>Set</code>、<code>Queue</code>等），直接调用<code>stream()</code>方法就可以获得<code>Stream</code>。</p>
<p>上述创建<code>Stream</code>的方法都是把一个现有的序列变为<code>Stream</code>，它的元素是固定的。</p>
</li>
<li><p>基于Supplier（供货人）</p>
<p>基于Supplier创建的Stream回不断调用<code>Supplier.get()</code>来不断产生下一个元素，这个<code>Stream</code>保存的不是元素而是算法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        Stream&lt;Integer&gt;  stream =Stream.generate(<span class="keyword">new</span> NumSupplier());</span><br><span class="line">        stream.limit(<span class="number">30</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumSupplier</span> <span class="keyword">implements</span> <span class="title">Supplier</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Files</code>类的<code>lines()</code>方法可以把一个文件变成一个<code>Stream</code>，每个元素代表文件的一行内容：</p>
</li>
</ul>
<h3 id="使用map"><a href="#使用map" class="headerlink" title="使用map"></a>使用map</h3><p>所谓map操作就是把一个操作运算映射到一个Stream序列的每一个元素上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; s1=Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">Stream&lt;Integer&gt; s2 =s1.map(e -&gt; e * e);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>map对String的操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; s = Arrays.stream(<span class="keyword">new</span> String[]&#123; <span class="string">&quot; pear &quot;</span>, <span class="string">&quot; ORANGE&quot;</span>, <span class="string">&quot; BaNaNa &quot;</span>&#125;);</span><br><span class="line">s.map(String::trim) <span class="comment">// 去空格</span></span><br><span class="line">        .map(String::toLowerCase) <span class="comment">// 变小写</span></span><br><span class="line">        .forEach(System.out::print); <span class="comment">// 打印</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="使用filter（过滤器）"><a href="#使用filter（过滤器）" class="headerlink" title="使用filter（过滤器）"></a>使用filter（过滤器）</h3><p>  就是对一个<code>Stream</code>的所有元素一一进行测试，不满足条件的就被“滤掉”了，剩下的满足条件的元素就构成了一个新的<code>Stream</code>。</p>
<h3 id="使用reduce"><a href="#使用reduce" class="headerlink" title="使用reduce"></a>使用reduce</h3><p><code>map()</code>和<code>filter()</code>都是<code>Stream</code>的转换方法，而<code>Stream.reduce()</code>则是<code>Stream</code>的一个聚合方法，他可以把一个Stream所有的元素按照聚合函数聚合成为一个结果。</p>
<h3 id="使用并行流-parallelStream"><a href="#使用并行流-parallelStream" class="headerlink" title="使用并行流 parallelStream"></a>使用并行流 parallelStream</h3><blockquote>
<p>使用并行流可以充分利用多核cpu的资源，通过<strong>工作窃取</strong>实现的多任务在多个cpu核中执行，把一个内容分成多个数据块，并用不同的线程分成多个数据块，并用不同的线程分别处理每个数据块的流。</p>
</blockquote>
<h5 id="Fork-Join框架"><a href="#Fork-Join框架" class="headerlink" title="Fork/Join框架"></a>Fork/Join框架</h5><p>采用工作窃取模式：当执行新的任务时，可以把他拆分 成更小的任务来进行执行，并把小任务添加到进程队列中，当一个队列执行完毕自己的队列任务之后，然后再从一个随机的线程队列中still一个并把它放入自己的任务队列中，比一般的线程池的实现，fork/Join优势体现在对于包含任务的处理里。一个线程池中，如果一个任务因为某些原因无法继续指向，那线程就会处于等在状态，在fork/join中，因为这个线程等待某个线程的而处于等待时，就会主动寻找其他尚未完成的子线程来执行，减少了进程等待的时间。</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>TopK</title>
    <url>/2020/11/11/TopK/</url>
    <content><![CDATA[<h1 id="TopK问题"><a href="#TopK问题" class="headerlink" title="TopK问题"></a>TopK问题</h1><p>你有一个数据榜单，你需要给用户显示rank排名前100的玩家。可以怎么样操作呢？</p>
<ul>
<li>直接排序，取top100</li>
<li>堆排序，取top100</li>
<li>快排的思想，使用划分函数取100</li>
</ul>
<p>那么他们分别有什么缺陷呢？</p>
<ul>
<li>直接排序，时间复杂度O（nlogn），空间复杂度O（n），所以当用户过多的时候，一块内存空间读不进，直接OOM异常</li>
<li>堆排序，构建小根堆，维护一个大小为K的堆，此时堆顶元素是这k个元素中最小值。所以新加入的值要是比堆顶大，就把这个堆顶pop出来，把这个新的值加入。由于维护一个堆的操作时间是O（logn）的，所以总空间复杂度是O（nlogn），空间复杂度是O（k），Java可以通过优先队列来实现，不需要自己写一个堆。</li>
<li>使用划分函数进行快排，由于快排的特性，总能让flag左边的值大于于flag，flag右边的值小于flag（递减序列）。所以只需要判断flag的index在k的那一边就OK，index&gt;k，就只需要排序[start，index-1]左半部分，反之排序[index+1,end]的部分，就很容易写出递归方案了，最好时间复杂度O（n），要是需要top1，那就是完全的进行一次快排时间复杂度：O（nlogn），由于需要修改数组，那自然空间复杂度为O（n）</li>
</ul>
<a id="more"></a>

<h2 id="堆排序topK代码-使用优先队列PriorityQueue"><a href="#堆排序topK代码-使用优先队列PriorityQueue" class="headerlink" title="堆排序topK代码(使用优先队列PriorityQueue)"></a>堆排序topK代码(使用优先队列PriorityQueue)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PQTopK</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getTopK(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> k)&#123;</span><br><span class="line">        <span class="comment">//（不指定Comparator时默认为最小堆），通过传入自定义的Comparator函数可以实现大顶堆。</span></span><br><span class="line">        PriorityQueue&lt;Integer&gt; pq= <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            pq.add(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;arr.length ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!pq.isEmpty() &amp;&amp; arr[i]&gt;pq.peek())&#123;</span><br><span class="line">                pq.poll();</span><br><span class="line">                pq.add(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//现在堆中的数据就是前k个元素</span></span><br><span class="line">        <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[pq.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;!pq.isEmpty()&amp;&amp;i&lt;ans.length;i++)&#123;</span><br><span class="line">            ans[i] = pq.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此时ans是正序的，第K大的是arr[0]</span></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> k =<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span>[] topK = getTopK(arr, k );</span><br><span class="line">        System.out.println(Arrays.toString(topK));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="快排思想实现topK"><a href="#快排思想实现topK" class="headerlink" title="快排思想实现topK"></a>快排思想实现topK</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QsortTopK</span> </span>&#123;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取最小的k个数 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getTopKByPartition(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt;= <span class="number">0</span> || k &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> size = arr.length;</span><br><span class="line">        <span class="keyword">int</span> target = k;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = size - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> mid = getMid(arr, low, high);</span><br><span class="line">        <span class="keyword">while</span> (mid != target) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mid &lt; target) &#123;</span><br><span class="line">                mid = getMid(arr, mid + <span class="number">1</span>, high);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mid = getMid(arr, low, mid - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] ret = <span class="keyword">new</span> <span class="keyword">int</span>[target];</span><br><span class="line">        System.arraycopy(arr, <span class="number">0</span>, ret, <span class="number">0</span>, target);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快排思想-一趟排序（划分函数）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMid</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> base = arr[low];</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="comment">// 判断条件必须加=场景，为&lt;= 不能为&lt;，否则数组中有相同数据时，会一直循环</span></span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; base &gt;= arr[high]) &#123;</span><br><span class="line">                high--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[low] = arr[high];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 判断条件必须加=场景，为&gt;= 不能为&gt;，否则数组中有相同数据时，会一直循环</span></span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; base &lt;= arr[low]) &#123;</span><br><span class="line">                low++;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[high] = arr[low];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[low] = base;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">3</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> k =<span class="number">3</span>;</span><br><span class="line">        System.out.println(Arrays.toString(getTopKByPartition(arr, k)));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p> <strong>用堆来实现TopK 和 用快排来实现TopK 的效率对比：</strong></p>
<p>　　　　　　　　　　　　　　　　　　“小顶堆”　　　　|　　　　“快排”</p>
<p>　　　　数据量为100万+10时：　　　　11毫秒　　　　|　　　　124毫秒</p>
<p>　　　　数据量为1000万+10时：　　　　28毫秒　　　  |　　　　1438毫秒</p>
<h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>要是是做游戏排行榜，大家的战力分布其实是符合正态分布的，所以找TopK时，可以根据数据分布，选择合适的西格玛值，就能大致的估计出第K个值，来优化base的取值，让其时间尽量靠近最佳时间。</p>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>创建型模式——单例模式</title>
    <url>/2020/11/16/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>   <strong>确保一个类只有一个实例</strong>，而且自行实例化并向整个系统提供这个实例，该类只提供一个取得其对象的方法。</p>
<h4 id="饿汉式（静态常量）"><a href="#饿汉式（静态常量）" class="headerlink" title="饿汉式（静态常量）"></a>饿汉式（静态常量）</h4><ol>
<li><p>构造器私有化（防止new）</p>
</li>
<li><p>类的内部创建对象</p>
</li>
<li><p>向外暴露一个静态公共方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span>&#123;</span><br><span class="line">    <span class="comment">//1构造器私有化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//内部创建实例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Single instance =<span class="keyword">new</span> Single();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>优点：写法简单，类装载的时候实例化，避免了线程同步</li>
<li>缺点：可能造成内存的浪费</li>
</ul>
<a id="more"></a>

<h4 id="饿汉式（静态代码块）"><a href="#饿汉式（静态代码块）" class="headerlink" title="饿汉式（静态代码块）"></a>饿汉式（静态代码块）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span>&#123;</span><br><span class="line">    <span class="comment">//1构造器私有化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//内部创建实例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single instance ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance =<span class="keyword">new</span> Single();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="懒汉式（线程不安全）"><a href="#懒汉式（线程不安全）" class="headerlink" title="懒汉式（线程不安全）"></a>懒汉式（线程不安全）</h4><p>提供一个静态的公有方法，使用这个方法时候才去创建instance</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance= <span class="keyword">new</span> Single();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>优点：懒加载</li>
<li>缺点：只能单线程使用</li>
</ul>
<h4 id="懒汉式（线程安全，同步方法）"><a href="#懒汉式（线程安全，同步方法）" class="headerlink" title="懒汉式（线程安全，同步方法）"></a>懒汉式（线程安全，同步方法）</h4><p>加入同步代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Single <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance= <span class="keyword">new</span> Single();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>优点：可以多线程了</li>
<li>缺点：同步效率低，每次new都要同步</li>
</ul>
<h4 id="懒汉式（无法解决线程安全，同步代码块）"><a href="#懒汉式（无法解决线程安全，同步代码块）" class="headerlink" title="懒汉式（无法解决线程安全，同步代码块）"></a>懒汉式（无法解决线程安全，同步代码块）</h4><p>没有实际意义的代码，所以需要双重检查</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Single.class)&#123;</span><br><span class="line">            instance= <span class="keyword">new</span> Single();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="双重检查"><a href="#双重检查" class="headerlink" title="双重检查"></a>双重检查</h4><p><code>volatile</code>是把可以把修改值直接放入储存(实现可见性,实现有序性,不能保证原子性)</p>
<ul>
<li>提供一个静态的公有方法，加入双重检查，解决了线程安全问题，同时解决懒加载问题</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Single instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Single.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Single();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>优点：线程安全，延迟加载，效率高</li>
</ul>
<h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>静态内部类的特点：当一个类被装载的时候，里面的static的类不会被装载。当调用到了静态内部类里面的东西的时候，静态内部类才会被装载，而类装载的时候线程的安全的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleGetInstance</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Single INSTANCE = <span class="keyword">new</span> Single();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingleGetInstance.INSTANCE;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>优点：避免线程不安全，利用静态内部类的特点实现延迟加载，效率高</li>
</ul>
<h4 id="枚举-（enum）"><a href="#枚举-（enum）" class="headerlink" title="枚举 （enum）"></a>枚举 （enum）</h4><p>枚举是一个特殊的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Single</span></span>&#123;</span><br><span class="line">    INSTANCE;<span class="comment">//属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;<span class="comment">//方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不仅避免多线程同步问题，还能防止反序列化重新创建新的对象</p>
<p>effective Java 作者推荐使用此方法实现</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式&#39;</title>
    <url>/2020/11/13/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>实例：</p>
<p>匹配用户输入为19xx</p>
<p>正则:19\d\d</p>
<p>Java字符串”19\\d\\d“</p>
<h2 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h2><h3 id="精确匹配规则"><a href="#精确匹配规则" class="headerlink" title="精确匹配规则"></a>精确匹配规则</h3><p>\u匹配指定Unicode字符</p>
<p>. 可以匹配任意一个字符</p>
<p>例如a.c 匹配abc，afc ，a%c</p>
<p>\d 匹配一个数字</p>
<p>\w 匹配一个数字、字母或者下划线</p>
<p>\s 匹配一个空白字符 A\sB 匹配A B</p>
<p>\W匹配非数字、字母或者下划线</p>
<p>\S匹配一个非空白字符</p>
<a id="more"></a>

<p><strong>下面这些需要和字符，\d,\w之类的一起使用</strong></p>
<p>*匹配任意一个数字</p>
<p>+ 匹配至少一个字符</p>
<p>？ 0-1个字符</p>
<p>{n} 表示匹配n个字符</p>
<p>{n,m} 表示匹配n-m个字符</p>
<p>{n，} 表示至少匹配n个字符</p>
<h3 id="复杂匹配规则"><a href="#复杂匹配规则" class="headerlink" title="复杂匹配规则"></a>复杂匹配规则</h3><p>^匹配开头，比如^A\d{3} 可以匹配A123，A345</p>
<p>$匹配结尾比如DA\d$可以匹配DA1</p>
<p>[]可以匹配访问内的字符，比如[acf]1可以匹配a1，c1，但是ac1不行</p>
<p>如果我们规定一个7~8位数字的电话号码不能以<code>0</code>开头，应该怎么写匹配规则呢？<code>\d&#123;7,8&#125;</code>是不行的，因为第一个<code>\d</code>可以匹配到<code>0</code>。</p>
<p>使用<code>[...]</code>可以匹配范围内的字符，例如，<code>[123456789]</code>可以匹配<code>1</code>~<code>9</code>，这样就可以写出上述电话号码的规则：<code>[123456789]\d&#123;6,7&#125;</code>。</p>
<p>把所有字符全列出来太麻烦，<code>[...]</code>还有一种写法，直接写<code>[1-9]</code>就可以。</p>
<p>[^…]匹配…里面没有的字符</p>
<h3 id="分组匹配"><a href="#分组匹配" class="headerlink" title="分组匹配"></a>分组匹配</h3><p>()可以分组</p>
<p>比如”(\d{4})\-(\d{1,2})\-(\d{1,2})可以吧“2019-12-21”转换成”2019””12”“21”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pattern p = Patten.comppile(<span class="string">&quot;正则表达式&quot;</span>);</span><br><span class="line">Matcher m = p.matcher(<span class="string">&quot;目标字符&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>但是反复使用<code>String.matches()</code>对同一个正则表达式进行多次匹配效率较低，因为每次都会创建出一样的<code>Pattern</code>对象。完全可以先创建出一个<code>Pattern</code>对象，然后反复使用，就可以实现编译一次，多次匹配：</p>
<p><strong>使用<code>Matcher</code>时，必须首先调用<code>matches()</code>判断是否匹配成功，匹配成功后，才能调用<code>group()</code>提取子串。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pattern p = Patten.comppile(<span class="string">&quot;正则表达式&quot;</span>);</span><br><span class="line">Matcher m = p.matcher(<span class="string">&quot;目标字符&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(match.matchs())&#123;</span><br><span class="line">    String whole =matcher.group(<span class="number">0</span>)<span class="comment">//0表示匹配整个字符串，1表示匹配第二个子串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><p>贪婪匹配改为非贪婪匹配在/d后加？</p>
<p>区分/d?和?的区别</p>
<h3 id="搜索和替换"><a href="#搜索和替换" class="headerlink" title="搜索和替换"></a>搜索和替换</h3><h4 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;a b c&quot;</span>.split(\\s); <span class="comment">//&#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><p>Matcher.find()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s =<span class="string">&quot; the q b f&quot;</span>;</span><br><span class="line">Pattern p = pattern.compile(<span class="string">&quot;the&quot;</span>);</span><br><span class="line">Matcher m =p.matcher(s);</span><br><span class="line"><span class="keyword">while</span>(m.find)&#123;</span><br><span class="line">    String sub = s.substring(m.start(),m.end());</span><br><span class="line">    sout(sub)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>忽略大小写 Pattern.CASE_INSENSITIVE</p>
<h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><p>String.replaceAll()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s =<span class="string">&quot; the q b f&quot;</span>;</span><br><span class="line">String r =s.replaceAll(<span class="string">&quot;需替换的（可正则表达式）&quot;</span>,<span class="string">&quot;目标替换&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="正则常用例子"><a href="#正则常用例子" class="headerlink" title="正则常用例子"></a>正则常用例子</h3><h3 id="常见正则实例"><a href="#常见正则实例" class="headerlink" title="常见正则实例"></a>常见正则实例</h3><h4 id="用户名正则"><a href="#用户名正则" class="headerlink" title="用户名正则"></a>用户名正则</h4><blockquote>
<p>//4-16位（字母数字下划线减号）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pattern =/^[a-zA-Z0-9_-]&#123;4,16&#125;&amp;/</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="密码强度正则"><a href="#密码强度正则" class="headerlink" title="密码强度正则"></a>密码强度正则</h4><blockquote>
<p>//密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pPattern = /^.*(?=.&#123;6,&#125;)(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="Email正则"><a href="#Email正则" class="headerlink" title="Email正则"></a><strong>Email正则</strong></h4><blockquote>
<p>//标准email</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pat = /^&#123;/^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z0-9]&#123;2,8&#125;)$/&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="手机号正则"><a href="#手机号正则" class="headerlink" title="手机号正则"></a>手机号正则</h4><blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mPattern = /^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\d&#123;8&#125;$/</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="URL正则"><a href="#URL正则" class="headerlink" title="URL正则"></a><strong>URL正则</strong></h4><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cP &#x3D; &#x2F;^[1-9]\d&#123;5&#125;(18|19|([23]\d))\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$&#x2F;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="身份证号正则"><a href="#身份证号正则" class="headerlink" title="身份证号正则"></a><strong>身份证号正则</strong></h4><blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cP = /^[1-9]\d&#123;5&#125;(18|19|([23]\d))\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$/</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="日期正则"><a href="#日期正则" class="headerlink" title="日期正则"></a><strong>日期正则</strong></h4><blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dP1 = /^\d&#123;4&#125;(\-)\d&#123;1,2&#125;\1\d&#123;1,2&#125;$/</span><br></pre></td></tr></table></figure></blockquote>
]]></content>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>螺旋矩阵</title>
    <url>/2020/11/12/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<h3 id="螺旋矩阵"><a href="#螺旋矩阵" class="headerlink" title="螺旋矩阵"></a>螺旋矩阵</h3><p>一个 n<em>n</em> 行 n<em>n</em> 列的螺旋矩阵可由如下方法生成：</p>
<p>从矩阵的左上角（第 11 行第 11 列）出发，初始时向右移动；如果前方是未曾经过的格子，则继续前进，否则右转；重复上述操作直至经过矩阵中所有格子。根据经过顺序，在格子中依次填入 1, 2, 3, … , n^21,2,3,…,<em>n</em>2，便构成了一个螺旋矩阵。</p>
<blockquote>
<p>下图是一个 <strong>n=4</strong> 时的螺旋矩阵。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1     2     3     4</span><br><span class="line">12    13    14     5</span><br><span class="line">11    16    15     6</span><br><span class="line">10     9     8     7</span><br></pre></td></tr></table></figure>
</blockquote>
<a id="more"></a>

<h3 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h3><p>一圈一圈的找，如果不在这一圈，就把最外围的一圈算上（4*（n-1）），</p>
<p>然后递归下一圈。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpiralMatrix</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> n ,<span class="keyword">int</span> i, <span class="keyword">int</span> j )</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>) <span class="keyword">return</span> j;</span><br><span class="line">        <span class="keyword">if</span>(j==n) <span class="keyword">return</span> n+i-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(i==n) <span class="keyword">return</span> <span class="number">3</span>*n-<span class="number">2</span> -j+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">4</span>*n - i -<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> find(n-<span class="number">2</span>,i-<span class="number">1</span>,j-<span class="number">1</span>)+<span class="number">4</span>*(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpiralMatrix a = <span class="keyword">new</span> SpiralMatrix();</span><br><span class="line">        System.out.println(a.find(<span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式设计原则</title>
    <url>/2020/11/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ul>
<li>找出应用中的变化之处，独立出来，不要和不需要编号的代码混在一起</li>
<li>面向接口编程而不是面向实现编程</li>
<li>为了交互对象的松耦合设计</li>
</ul>
<a id="more"></a>

<ol>
<li><p>单一职责原则</p>
<ul>
<li><p>一个类，应当只有一个引起它变化的原因；即一个类应该只有一个职责。</p>
<p>■ 降低类的复杂性；</p>
<p>■ 提高类的可读性；</p>
<p>■ 提高代码的可维护性和复用性；</p>
<p>■ 降低因变更引起的风险。</p>
</li>
</ul>
</li>
<li><p>接口隔离原则</p>
<ul>
<li>客户端不应该依赖它不需要的接口。</li>
<li>类间的依赖关系应该建立在最小的接口上。</li>
</ul>
</li>
<li><p>依赖倒置原则（依赖倒置原则更加精确的定义就是“面向接口编程”）</p>
<ul>
<li>高层模块不应该依赖低层模块，两者都依赖其抽象；</li>
<li>抽象不依赖细节；</li>
<li>细节应该依赖于抽象。</li>
</ul>
</li>
<li><p>开闭原则</p>
<p>一个软件实体应当对扩展开放，对修改关闭。</p>
<ul>
<li>提高复用性。</li>
<li>提高可维护性。</li>
<li>提高灵活性。</li>
<li>易于测试。</li>
</ul>
</li>
<li><p>里氏替换原则</p>
<p>如果对一个类型为S的对象o1，都有类型为T的对象o2，使得以S定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型T是类型S的子类型。（请说人话）</p>
<ul>
<li>子类必须完全实现父类的方法；</li>
<li>子类可以有自己的个性；</li>
<li>覆盖或实现父类的方法时输入参数可以被放大；</li>
<li>覆盖或实现父类的方法时输出结果可以被缩小。（子类不能使用一个低访问权限的方法覆盖基类中的高访问权限的方法。）</li>
</ul>
</li>
<li><p>迪米特法则（最少知识原则）</p>
<p>是一个对象应当对其他对象尽可能少的了解</p>
</li>
<li><p>合成复用原则</p>
<p>使用一个其他类的方法时，<strong>能使用组合/聚合，就不要用继承</strong></p>
<p><code>组合：class B中new A</code></p>
<p><code>聚合: class B中set()方法调用A</code></p>
<p>继承（抽象类）是 is-a </p>
<p>组合（接口）是has-a </p>
<p>继承之后重写并新增是is-like -a</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>转发与重定向</title>
    <url>/2020/11/11/%E8%BD%AC%E5%8F%91%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    <content><![CDATA[<h1 id="转发与重定向"><a href="#转发与重定向" class="headerlink" title="转发与重定向"></a>转发与重定向</h1><p> 转发和重定向都是作为实现页面跳转的方法，他们的区别</p>
<ul>
<li><p>转发：</p>
<ul>
<li><p>由服务器进行的页面跳转，一个对oneServlet的请求，服务器使用twoServlet响应</p>
</li>
<li><blockquote>
<p>request.getRequestDispatcher(“/目标地址”).forward(request,response);</p>
</blockquote>
</li>
<li><p>特点：</p>
<ul>
<li>地址栏不发生变化，显示的是上一个页面的地址</li>
<li>只有一次请求</li>
<li>请求域中的数据不会丢失</li>
<li>根目录：<a href="http://localhost:8080/%E9%A1%B9%E7%9B%AE%E5%9C%B0%E5%9D%80/%EF%BC%8C%E5%8C%85%E5%90%AB%E4%BA%86%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80">http://localhost:8080/项目地址/，包含了项目的访问地址</a></li>
</ul>
</li>
</ul>
</li>
<li><p>重定向：</p>
<ul>
<li><p>由浏览器进行的页面跳转，浏览器对服务器1进行访问，服务器1响应返回让浏览器进行访问服务器2的操作</p>
</li>
<li><blockquote>
<p>response.sendRedirect(“要跳转的地址”)</p>
</blockquote>
<ul>
<li>地址栏显示新的地址</li>
<li>请求2次</li>
<li>请求域中的数据会丢失</li>
<li>根目录：<a href="http://localhost:8080/">http://localhost:8080/</a> 没有项目的名字</li>
</ul>
</li>
</ul>
</li>
<li><p>问：什么时候使用转发，什么时候使用重定向？</p>
<pre><code>如果要保留请求域中的数据，使用转发，否则使用重定向。

以后访问数据库，增删改使用重定向，查询使用转发。</code></pre>
</li>
<li><p>问：转发或重定向后续的代码是否还会运行？</p>
<pre><code>无论转发或重定向后续的代码都会执行</code></pre>
</li>
</ul>
<p>​          </p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>通过反射定义注解</title>
    <url>/2020/11/15/%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<p>本文则以输入校验的 <code>@Length</code>注解为例，自己动手实现一遍，这个学会了，其他注解实现原理也是类似。</p>
<h2 id="第一步：首先定义注解：-Length"><a href="#第一步：首先定义注解：-Length" class="headerlink" title="第一步：首先定义注解：@Length"></a>第一步：首先定义注解：@Length</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD&#125;)</span><span class="comment">//元注解</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="comment">//元注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Length&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">()</span></span>; <span class="comment">// 允许字符串长度的最小值</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">()</span></span>; <span class="comment">// 允许字符串长度的最大值</span></span><br><span class="line">    <span class="function">String <span class="title">errorMsg</span><span class="params">()</span></span>; <span class="comment">// 自定义的错误提示信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<ul>
<li><p>说明：</p>
<ol>
<li><p>注解的定义有点像定义接口 <code>interface</code>，但唯一不同的是前面需要加一个 <code>@</code>符号。</p>
</li>
<li><p>注解的成员变量只能使用基本类型、 <code>String</code>或者 <code>enum</code>枚举，比如 <code>int</code>可以，但 <code>Integer</code>这种包装类型就不行，需注意。</p>
</li>
<li><p>像上面 <code>@Target</code>、 <code>@Retention</code>这种加在注解定义上面的注解，我们称为 <strong>“元注解”</strong>，元注解就是专门用于给注解添加注解的注解，哈哈，很拗口，简单理解，元注解就是天生就有的注解，可直接用于注解的定义上。</p>
</li>
<li><p><code>@Target(xxx)</code> 用来说明该自定义注解可以用在什么位置，比如：</p>
<ul>
<li><code>ElementType.FIELD</code>：说明自定义的注解可以用于类的变量</li>
<li><code>ElementType.METHOD</code>：说明自定义的注解可以用于类的方法</li>
<li><code>ElementType.TYPE</code>：说明自定义的注解可以用于类本身、接口或 <code>enum</code>类型</li>
<li>等等… 还有很多，如果记不住，建议现用现查</li>
</ul>
</li>
<li><p><code>@Retention(xxx)</code> 用来说明你自定义注解的生命周期，比如：</p>
<ul>
<li><code>@Retention(RetentionPolicy.RUNTIME)</code>：表示注解可以一直保留到运行时，因此可以通过反射获取注解信息</li>
<li><code>@Retention(RetentionPolicy.CLASS)</code>：表示注解被编译器编译进 <code>class</code>文件，但运行时会忽略</li>
<li><code>@Retention(RetentionPolicy.SOURCE)</code>：表示注解仅在源文件中有效，编译时就会被忽略</li>
</ul>
<p>所以声明周期从长到短分别为：<strong>RUNTIME</strong> &gt; <strong>CLASS</strong> &gt; <strong>SOURCE</strong> ，一般来说，如果需要在运行时去动态获取注解的信息，还是得用RUNTIME，就像本文所用。</p>
</li>
</ol>
</li>
</ul>
<h2 id="获取注解并对其认证"><a href="#获取注解并对其认证" class="headerlink" title="获取注解并对其认证"></a>获取注解并对其认证</h2><p>在运行时候获取注解包含的信息，得用<strong>java反射机制</strong></p>
<p>下面写了一个验证函数 <code>validate()</code>，代码中会<strong>逐行用注释去解释</strong>想要达到的目的，认真看一下每一行的注释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">validate</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IllagelAccessException</span>&#123;</span><br><span class="line">    <span class="comment">//先通过反射获取object对象的类有哪些字段</span></span><br><span class="line">    <span class="comment">//本文就是获取到Student的id、name、mobile的三个字段</span></span><br><span class="line">    <span class="comment">//getClass()获得获得一个实例的类型类；getDeclaredFields()获得某个类的所有声明的字段，即包括public、private和proteced，但是不包括父类的申明字段。</span></span><br><span class="line">    Field[] fields = object.getClass().getDeclaredFields();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//for循环逐个检测校验，看看哪个字段标了注解</span></span><br><span class="line">    <span class="keyword">for</span>(Field field : fields)&#123;</span><br><span class="line">        <span class="comment">//if判断：检测字段是有没有@Length注解</span></span><br><span class="line">        <span class="keyword">if</span>(field.isAnnotationPresent(Length.class))&#123; <span class="comment">//Length类型的注解是否在反射获得的那个类上</span></span><br><span class="line">            <span class="comment">//通过反射获取到字段上面标注的@Length的详细信息</span></span><br><span class="line">            Length length = field.getAnnotation(Length.class);</span><br><span class="line">            field.setAccessable(<span class="keyword">true</span>);<span class="comment">//允许反射时候可以获得私有变量</span></span><br><span class="line">            <span class="comment">//用反射获取字段的实际值</span></span><br><span class="line">            <span class="keyword">int</span> value = ((String)field.get(objedt)).length;</span><br><span class="line">            <span class="comment">//将字段的实际值和注解上做标志的值进行比对</span></span><br><span class="line">            <span class="keyword">if</span>(value&lt;length.min() || value&gt;length.max)&#123;</span><br><span class="line">                <span class="keyword">return</span> lenth.errorMsh();</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Length(min = 11,max = 11, erroeMsg = &quot;error phone number&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>感谢CodeSheep的<a href="https://mp.weixin.qq.com/s/gdYysBB3aD_HmPyvEThFXw">原文</a></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>人工智能基础</title>
    <url>/2020/11/14/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="人工智能基础复习材料"><a href="#人工智能基础复习材料" class="headerlink" title="人工智能基础复习材料"></a>人工智能基础复习材料</h1><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="人工智能-Artificial-Intelligence-："><a href="#人工智能-Artificial-Intelligence-：" class="headerlink" title="人工智能(Artificial Intelligence)："></a>人工智能(Artificial Intelligence)：</h3><p> 人工智能是研究、开发用于模拟、延伸和扩展人智能的理论、方法、技术及应用系统的一门新技术科学。 人工智能领域的研究包括机器人、语言识别、图像识别、自然语言处理和专家系统等。智能的定义：智能是 个人从经验中学习、理性思考、记忆重要信息、以及应付日常生活需求的认知能力。</p>
<a id="more"></a>

<h3 id="机器学习-Machine-Learning"><a href="#机器学习-Machine-Learning" class="headerlink" title="机器学习(Machine Learning)"></a>机器学习(Machine Learning)</h3><p>机器学习是一门专门研究计算机模拟或实现人类的学习行为，重新组织已有的知识结构，并获取新的知 识和技能，进而使之不断改善自身性能的学科。 </p>
<h3 id="深度学习-Deep-Learning"><a href="#深度学习-Deep-Learning" class="headerlink" title="深度学习(Deep Learning)"></a>深度学习(Deep Learning)</h3><p>深度学习一般采用多层非线性变换，通过对数据特征的自动抽象和逐层提取，来实现分类或回归的学习 目的。 </p>
<h3 id="物联网-IoT-Internet-of-things"><a href="#物联网-IoT-Internet-of-things" class="headerlink" title="物联网(IoT, Internet of things)"></a>物联网(IoT, Internet of things)</h3><p>物联网即“万物相连的互联网”，是互联网基础上的延伸和扩展的网络，将各种信息传感设备与互联网 结合起来而形成的一个巨大网络，实现在任何时间、任何地点，人、机、物的互联互通。 </p>
<h3 id="专家系统-Expert-system"><a href="#专家系统-Expert-system" class="headerlink" title="专家系统(Expert system)"></a>专家系统(Expert system)</h3><p>专家系统是一个智能计算机程序系统，其内部含有大量的某个领域专家水平的知识与经验，能够利用人 类专家的知识和解决问题的方法来处理该领域问题。也就是说，专家系统是一个具有大量的专门知识与经验 的程序系统，它应用人工智能技术和计算机技术，根据某领域一个或多个专家提供的知识和经验，进行推理 和判断，模拟人类专家的决策过程，以便解决那些需要人类专家处理的复杂问题，简而言之，专家系统是一 种模拟人类专家解决领域问题的计算机程序系统。 </p>
<h3 id="有监督学习-Supervised-Learning"><a href="#有监督学习-Supervised-Learning" class="headerlink" title="有监督学习(Supervised Learning)"></a>有监督学习(Supervised Learning)</h3><p>训练数据由一组训练实例组成。在监督学习中，每一个例子都是一对由一个输入对象（通常是一个向量） 和一个期望的输出值（也被称为监督信号）。有监督学习算法分析训练数据，并产生一个推断的功能，它可 以用于映射新的例子。一个最佳的方案将允许该算法正确地在标签不可见的情况下确定类标签。 用已知某种或某些特性的样本作为训练集，以建立一个数学模型(如模式识别中的判别模型，人工神经 网络法中的权重模型等)，再用已建立的模型来预测未知样本，此种方法称为有监督学习。是最常见的机器 学习方法。 </p>
<h3 id="无监督学习-Unsupervised-Learning"><a href="#无监督学习-Unsupervised-Learning" class="headerlink" title="无监督学习(Unsupervised Learning)"></a>无监督学习(Unsupervised Learning)</h3><p>根据类别未知(没有被标记)的训练样本解决模式识别中的各种问题，称之为无监督学习。 不同于有监督学习，不需要用历史经验知识作为指导，，而是不断地自主从数据本身特性认知数据的特 征，自主归纳和巩固，形成对知识的认知结果。 </p>
<h3 id="人工神经网络-ANN-Artificial-Neural-Network"><a href="#人工神经网络-ANN-Artificial-Neural-Network" class="headerlink" title="人工神经网络(ANN, Artificial Neural Network)"></a>人工神经网络(ANN, Artificial Neural Network)</h3><p>也简称为神经网络(NN)，是模仿生物脑神经的工作原理，由大量简单的处理单元广泛互联形成复杂的 网络系统，从而对模糊的随机性的非线性数据表现出强大的逼近能力。 </p>
<h3 id="代价函数-lost-function"><a href="#代价函数-lost-function" class="headerlink" title="代价函数(lost function)"></a>代价函数(lost function)</h3><p>(或者损失函数 loss function) 代价函数或损失函数是衡量学习模型的预测值与实际值之间误差的函数。这个误差被称为模型误差，函 数值越小表示误差越小，也就意味着预测值越接近实际值，认为所构建的模型性能越好。 二、各章节算法等信息补充 生成与测试范式 解决问题的直接方法是提出可能的解，然后检查每个提议，看是否有提议构成了解。 </p>
<h2 id="算法与源码"><a href="#算法与源码" class="headerlink" title="算法与源码"></a>算法与源码</h2><h3 id="n皇后回溯解法"><a href="#n皇后回溯解法" class="headerlink" title="n皇后回溯解法"></a>n皇后回溯解法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">char</span>[][] chess = <span class="keyword">new</span> <span class="keyword">char</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                chess[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        solve(res, chess, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(List&lt;List&lt;String&gt;&gt; res, <span class="keyword">char</span>[][] chess, <span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (row == chess.length) &#123;</span><br><span class="line">            res.add(construct(chess));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; chess.length; col++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (valid(chess, row, col)) &#123;</span><br><span class="line">                chess[row][col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                solve(res, chess, row + <span class="number">1</span>);</span><br><span class="line">                chess[row][col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//row表示第几行，col表示第几列</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(<span class="keyword">char</span>[][] chess, <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断当前列有没有皇后,因为他是一行一行往下走的，</span></span><br><span class="line">        <span class="comment">//我们只需要检查走过的行数即可，通俗一点就是判断当前</span></span><br><span class="line">        <span class="comment">//坐标位置的上面有没有皇后</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chess[i][col] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断当前坐标的右上角有没有皇后</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = row - <span class="number">1</span>, j = col + <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &lt; chess.length; i--, j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chess[i][j] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断当前坐标的左上角有没有皇后</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = row - <span class="number">1</span>, j = col - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>; i--, j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chess[i][j] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把数组转为list</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">construct</span><span class="params">(<span class="keyword">char</span>[][] chess)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; path = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chess.length; i++) &#123;</span><br><span class="line">            path.add(<span class="keyword">new</span> String(chess[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="贪婪-贪心算法"><a href="#贪婪-贪心算法" class="headerlink" title="贪婪(贪心算法)"></a>贪婪(贪心算法)</h3><p> 贪心算法(Greedy Algorithm)，又称贪婪算法，是一种<strong>在每一步选择中都采取在当前状态下最好或最 优(即最有利)的选择</strong>，从而希望导致结果是最好或最优的算法。比如在旅行销售员问题中，如果销售员每次 都选择最近的城市，那这就是一种贪心算法。Dijkstra 算法就算采用了贪心策略的实例，每次扩展最短的节 点，更新距离表。贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择。也就是说，不从 整体最优上加以考虑，做出的只是在某种意义上的局部最优解</p>
<h3 id="TSP-旅行商问题-TSP-最短路径问题"><a href="#TSP-旅行商问题-TSP-最短路径问题" class="headerlink" title="TSP 旅行商问题(TSP 最短路径问题)"></a>TSP 旅行商问题(TSP 最短路径问题)</h3><p>(Travelling Salesman Problem, TSP)是这样一个问题：给定一系列城 市和每对城市之间的距离，求解访问每一座城市一次并回到起始城市的最短回路。它是组合优化中的一个 NP Hard 问题，在运筹学和理论计算机科学中非常重要。TSP 的暴力解法时间复杂度是 O(n!)，目前现有的 非暴力算法只能无限逼近其最优解，而不能保证得到通解</p>
<h3 id="盲目搜索"><a href="#盲目搜索" class="headerlink" title="盲目搜索"></a>盲目搜索</h3><h4 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h4><p> 实现借助 Stack/递归 在树很深、分支因子不大、解出现的位置较深的情况下适合 </p>
<h4 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h4><p>实现借助 Queue 在分支因子很大，解出现的位置合理深度、路径不是非常深的情况下适合</p>
<h4 id="DFS-ID"><a href="#DFS-ID" class="headerlink" title="DFS-ID"></a>DFS-ID</h4><p>迭代加深的深度优先搜索 实质上就是限定下界的深度优先搜索。即首先允许深度优先搜索 K 层搜索树，若没有发现可行解，再 将 K+1 后重复以上步骤搜索，直到搜索到可行解。在迭代加深搜索的算法中，连续的深度优先搜索被引入， 每一个深度约束逐次加 1，直到搜索到目标为止。迭代加深搜索算法就是仿广度优先搜索的深度优先搜索。 既能满足深度优先搜索的线性存储要求，又能保证发现一个最小深度的目标结点。从实际应用来看，迭代加 深搜索的效果比较好，并不比广度优先搜索慢很多，但是空间复杂度却与深度优先搜索相同，比广度优先搜 索小很多，在一些层次遍历的题目中，迭代加深不失为一种好方法 </p>
<h3 id="知情搜索-分支定界法"><a href="#知情搜索-分支定界法" class="headerlink" title="知情搜索-分支定界法"></a>知情搜索-分支定界法</h3><p> 代价评估函数 f(n) = g(n) + h*(n)表示从初始节点 S 到目标节点 n 的代价，g(n):从初始节点 S 到目标 节点 n 的距离，h*(n)从当前位置 n 经过最短路径到达 G 的剩余距离，然而在过程中无法直接求出 h*(n)， 因此使用一个估计值 h(n)代替，只有对所有节点 h(n)&lt;=h*(n)才有意义，此时 h(n)被视为可接受的启发， 因此最终评估函数是 f(n) = g(n) + h(n) </p>
<h4 id="UCS"><a href="#UCS" class="headerlink" title="UCS"></a>UCS</h4><p>一致代价搜索（普通的分支定界） 一致代价搜索的特点是 f(n)=g(n)，也就是说对任意 n 都有 h(n)=0，非常类似 BFS，不过 BFS 是努力 找一条通往目标的路径，而 UCS 是努力找一条最优路径。 </p>
<h4 id="A"><a href="#A" class="headerlink" title="A*"></a>A*</h4><p> A*算法实际上是综合 BFS、Dijkstra、最佳优先搜索算法的特点于一身的（或者说是采用了剩余距离估 计值和动态规划的分支定界法）。f(n)是节点 n 的综合优先级。当我们选择下一个要遍历的节点时，我们总 会选取综合优先级最高（值最小）的节点。g(n) 是节点 n 距离起点的代价。h(n)是节点 n 距离终点的预计 代价，这也就是 A<em>算法的启发函数。关于启发函数我们在下面详细讲解。A</em>算法在运算过程中，每次从优 先队列中选取 f(n)值最小（优先级最高）的节点作为下一个待遍历的节点。 另外，A*算法使用两个集合来表示待遍历的节点，与已经遍历过的节点，这通常称之为 open_set 和 close_set。 </p>
<p>完整A*算法过程</p>
<ul>
<li><p>初始化openSet和closeSet</p>
</li>
<li><p>把起点加入openSet中</p>
</li>
<li><p>如果openSet!=null,就从openSet中选择第一个节点n：</p>
<ul>
<li><p>如果n为终点</p>
<p>就从双面开始逐步最终parent节点，一直到达起点，返回结果路径，算法结束</p>
</li>
<li><p>如果n不是终点</p>
<p>把节点n从openSet中移除，并加入到closeSet中</p>
<p>遍历n节点的所有临近节点 </p>
<ul>
<li>如果临近节点在closeSet中，就跳过，选择下一个临近节点</li>
<li>如果临近节点m不在openSet中<ol>
<li>设置m的parent节点为n</li>
<li>计算m到终点的代价f（n）</li>
<li>把m节点加入到openSet中</li>
</ol>
</li>
<li>对openSet中的节点按照代价从小到大的排序（openSet可以使用优先队列优化）</li>
</ul>
</li>
</ul>
</li>
<li><p>返回找不到路径的错误</p>
</li>
</ul>
<h4 id="八数码"><a href="#八数码" class="headerlink" title="八数码"></a>八数码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">slidingPuzzle</span><span class="params">(<span class="keyword">int</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> R = board.length, C = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> sr = <span class="number">0</span>, sc = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Find sr, sc</span></span><br><span class="line">        search:<span class="comment">//跳转</span></span><br><span class="line">            <span class="keyword">for</span> (sr = <span class="number">0</span>; sr &lt; R; sr++)</span><br><span class="line">                <span class="keyword">for</span> (sc = <span class="number">0</span>; sc &lt; C; sc++)</span><br><span class="line">                    <span class="keyword">if</span> (board[sr][sc] == <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">break</span> search;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] directions = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;&#125;;</span><br><span class="line">        PriorityQueue&lt;Node&gt; heap = <span class="keyword">new</span> PriorityQueue&lt;Node&gt;((a, b) -&gt;</span><br><span class="line">            (a.heuristic + a.depth) - (b.heuristic + b.depth));</span><br><span class="line">        Node start = <span class="keyword">new</span> Node(board, sr, sc, <span class="number">0</span>);</span><br><span class="line">        heap.add(start);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Integer&gt; cost = <span class="keyword">new</span> HashMap();</span><br><span class="line">        cost.put(start.boardstring, <span class="number">9999999</span>);</span><br><span class="line"></span><br><span class="line">        String target = Arrays.deepToString(<span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;, &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">0</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;);<span class="comment">//这里改成目标</span></span><br><span class="line">        String targetWrong = Arrays.deepToString(<span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;, &#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">0</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!heap.isEmpty()) &#123;</span><br><span class="line">            Node node = heap.poll();</span><br><span class="line">            <span class="keyword">if</span> (node.boardstring.equals(target))</span><br><span class="line">                <span class="keyword">return</span> node.depth;</span><br><span class="line">            <span class="keyword">if</span> (node.boardstring.equals(targetWrong))</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (node.depth + node.heuristic &gt; cost.get(node.boardstring))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>[] di: directions) &#123;</span><br><span class="line">                <span class="keyword">int</span> nei_r = di[<span class="number">0</span>] + node.zero_r;</span><br><span class="line">                <span class="keyword">int</span> nei_c = di[<span class="number">1</span>] + node.zero_c;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果邻居不在版上，或者行列错误</span></span><br><span class="line">                <span class="keyword">if</span> ((Math.abs(nei_r - node.zero_r) + Math.abs(nei_c - node.zero_c) != <span class="number">1</span>) ||</span><br><span class="line">                        nei_r &lt; <span class="number">0</span> || nei_r &gt;= R || nei_c &lt; <span class="number">0</span> || nei_c &gt;= C)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span>[][] newboard = <span class="keyword">new</span> <span class="keyword">int</span>[R][C];</span><br><span class="line">                <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span>[] row: node.board)</span><br><span class="line">                    newboard[t++] = row.clone();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 在新版上交换元素</span></span><br><span class="line">                newboard[node.zero_r][node.zero_c] = newboard[nei_r][nei_c];</span><br><span class="line">                newboard[nei_r][nei_c] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                Node nei = <span class="keyword">new</span> Node(newboard, nei_r, nei_c, node.depth+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (nei.depth + nei.heuristic &gt;= cost.getOrDefault(nei.boardstring, <span class="number">9999999</span>))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                heap.add(nei);</span><br><span class="line">                cost.put(nei.boardstring, nei.depth + nei.heuristic);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] board;</span><br><span class="line">    String boardstring;</span><br><span class="line">    <span class="keyword">int</span> heuristic;</span><br><span class="line">    <span class="keyword">int</span> zero_r;</span><br><span class="line">    <span class="keyword">int</span> zero_c;</span><br><span class="line">    <span class="keyword">int</span> depth;</span><br><span class="line">    Node(<span class="keyword">int</span>[][] B, <span class="keyword">int</span> zr, <span class="keyword">int</span> zc, <span class="keyword">int</span> d) &#123;</span><br><span class="line">        board = B;</span><br><span class="line">        boardstring = Arrays.deepToString(board);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算启发（heuristic）式</span></span><br><span class="line">        heuristic = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> R = B.length, C = B[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; R; ++r)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; C; ++c) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[r][c] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> v = (board[r][c] + R*C - <span class="number">1</span>) % (R*C);</span><br><span class="line">                <span class="comment">// v/C, v%C: board[r][c]应该到哪里的最短路径（用于评估函数</span></span><br><span class="line">                ）</span><br><span class="line">                heuristic += Math.abs(r - v/C) + Math.abs(c - v%C);</span><br><span class="line">            &#125;</span><br><span class="line">        heuristic /= <span class="number">2</span>;</span><br><span class="line">        zero_r = zr;</span><br><span class="line">        zero_c = zc;</span><br><span class="line">        depth = d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="博弈树"><a href="#博弈树" class="headerlink" title="博弈树"></a>博弈树</h3><p> 极大极小算法 python 实现(以解决 tic tac toe 井字棋问题为例) evaluate 方法功能是是对当前棋盘状态相对于 player 打分，分数越高对 player 越有利 </p>
<h4 id="极小极大算法"><a href="#极小极大算法" class="headerlink" title="极小极大算法"></a>极小极大算法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxMinSearch</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxMinSearch</span><span class="params">(String graph, Set&lt;Integer&gt; vis, <span class="keyword">int</span> len, <span class="keyword">int</span> depth)</span></span>&#123;<span class="comment">//一维化二维平面x=graph.len/len;y=graph.len%len</span></span><br><span class="line">        <span class="keyword">int</span> bestValue,value;</span><br><span class="line">        <span class="keyword">if</span>(isGameOver())&#123;<span class="comment">//游戏结束，满足三连或者平局</span></span><br><span class="line">            <span class="keyword">return</span> evaluation(graph);<span class="comment">//返回评估值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(depth&lt;=<span class="number">0</span>)&#123;<span class="comment">//达到叶子节点，返回估值，在井字棋中博弈树中深度为8</span></span><br><span class="line">            <span class="keyword">return</span> evaluation(graph);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ismax())&#123;</span><br><span class="line">            bestValue = -INF;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            bestValue = INF;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;graph.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis.contains(i))&#123;</span><br><span class="line">                vis.add(i);<span class="comment">//走棋</span></span><br><span class="line">                value = maxMinSearch(graph,vis,len,depth-<span class="number">1</span>);</span><br><span class="line">                vis.remove(i);<span class="comment">//回溯</span></span><br><span class="line">                <span class="keyword">if</span>(ismax())&#123;</span><br><span class="line">                    bestValue = Math.max(value, bestValue);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    bestValue = Math.min(value, bestValue);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bestValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">ismax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">evaluation</span><span class="params">(String graph)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isGameOver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ab剪枝"><a href="#ab剪枝" class="headerlink" title="ab剪枝"></a>ab剪枝</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ABMaxMinS</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">AlphaBeta</span><span class="params">(String graph, Set&lt;Integer&gt; vis,<span class="keyword">int</span> len,<span class="keyword">int</span> nPlay,<span class="keyword">int</span> nA,<span class="keyword">int</span> nB)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isGameOver())&#123;</span><br><span class="line">            <span class="keyword">return</span> evelution(graph);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nPlay==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> evelution(graph);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isMinNode())&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; graph.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(vis.contains(i))&#123;</span><br><span class="line">                    vis.add(i);</span><br><span class="line">                    <span class="keyword">int</span> score = AlphaBeta(graph, vis, len, nPlay-<span class="number">1</span>, nA, nB);</span><br><span class="line">                    vis.remove(i);</span><br><span class="line">                    <span class="keyword">if</span>(score&lt;nB)&#123;</span><br><span class="line">                        nB = score;</span><br><span class="line">                        <span class="keyword">if</span>(nA&gt;=nB)&#123;</span><br><span class="line">                            <span class="keyword">return</span> nA;<span class="comment">//alpha剪枝,选大的</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; graph.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (vis.contains(i)) &#123;</span><br><span class="line">                    vis.add(i);</span><br><span class="line">                    <span class="keyword">int</span> score = AlphaBeta(graph, vis, len, nPlay - <span class="number">1</span>, nA, nB);</span><br><span class="line">                    vis.remove(i);</span><br><span class="line">                    <span class="keyword">if</span> (score &gt; nA) &#123;</span><br><span class="line">                        nA = score;</span><br><span class="line">                        <span class="keyword">if</span> (nB &lt;= nA) &#123;</span><br><span class="line">                            <span class="keyword">return</span> nB;<span class="comment">//alpha剪枝，选小的</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nA;<span class="comment">//返回最小的</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMinNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isGameOver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">evelution</span><span class="params">(String graph)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="负极小值极大"><a href="#负极小值极大" class="headerlink" title="负极小值极大"></a>负极小值极大</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NegaMax</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nageMax</span><span class="params">(String graph, Set&lt;Integer&gt; vis, <span class="keyword">int</span> len, <span class="keyword">int</span> depth)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> best = -INF;</span><br><span class="line">        <span class="keyword">if</span>(isGameOver())&#123;<span class="comment">//游戏结束，满足三连或者平局</span></span><br><span class="line">            <span class="keyword">return</span> evaluation(graph);<span class="comment">//返回评估值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(depth&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> evaluation(graph);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;graph.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis.contains(i))&#123;</span><br><span class="line">                vis.add(i);<span class="comment">//走棋</span></span><br><span class="line">                <span class="keyword">int</span> value = -nageMax(graph,vis,len,depth-<span class="number">1</span>);<span class="comment">//这里是负号</span></span><br><span class="line">                vis.remove(i);<span class="comment">//回溯</span></span><br><span class="line">                <span class="keyword">if</span>(value&lt;best)&#123;</span><br><span class="line">                    best = value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> best;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">evaluation</span><span class="params">(String graph)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isGameOver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h3><h4 id="神经网络神经元模型"><a href="#神经网络神经元模型" class="headerlink" title="神经网络神经元模型"></a>神经网络神经元模型</h4><p><img src="/.top//Users\admin\AppData\Roaming\Typora\typora-user-images\image-20201026151434846.png" alt="image-20201026151434846"></p>
<h4 id="反向传播算法-Back-Propagation"><a href="#反向传播算法-Back-Propagation" class="headerlink" title="反向传播算法(Back Propagation)"></a>反向传播算法(Back Propagation)</h4><p>步骤：</p>
<ol>
<li><p>前向传播（正向数据传播） 样本从输入层输入网络，随机初始化权重和偏置，通过求和及激活函数计算，直到输出层输出结果 </p>
<p>反向误差传播 计算前向传播阶段网络的输出与期望输出（样本标签）之间的误差，从输出层到隐含层，最后到输入 层，逐层调节各层每个神经元的连接权重和偏置 </p>
</li>
</ol>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>java IO</title>
    <url>/2020/11/11/the_java-IO/</url>
    <content><![CDATA[<h1 id="Java-IO"><a href="#Java-IO" class="headerlink" title="Java IO"></a>Java IO</h1><h2 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h2><p>blocking I/O（阻塞同步的io）</p>
<p>服务器实现模式为一个连接连接一个线程，客户端确保请求是服务器就需要启动一个线程进行处理，如果连接不做事情就会浪费资源（可以通过线程池优化）</p>
<h4 id="简单流程"><a href="#简单流程" class="headerlink" title="简单流程"></a>简单流程</h4><ol>
<li>服务器端启动一个serverSocket</li>
<li>客户端启动Socket对服务器进行通信，默认情况下服务器需要对每个客户建立一个线程与之通信</li>
<li>客户端发送一个请求之后，先咨询服务器是否有线程响应<ul>
<li>如果没有就会wait或者被拒绝</li>
<li>如果有客户端就会等待请求结束后继续执行</li>
</ul>
</li>
</ol>
<a id="more"></a>

<blockquote>
<p>一个bio的服务器端</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BIOServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Executor threadPool = Executors.newCachedThreadPool();</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器启动了&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//监听等待客户端连接</span></span><br><span class="line">            Socket socket = serverSocket.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;已连接一个客户端&quot;</span>);</span><br><span class="line">            threadPool.execute(() -&gt; &#123;</span><br><span class="line">                <span class="comment">//可以和客户端通信的</span></span><br><span class="line">                handler(socket);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个handle方法与客户端通信</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//通过一份socket宏碁一个输入</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream inputStream = socket.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//循环读取客户端发送的数据</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> read = inputStream.read(bytes);</span><br><span class="line">                <span class="keyword">if</span>(read!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,read));</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><p>java non_blocking IO 是一个同步非阻塞的</p>
<p><strong>核心组件</strong></p>
<ul>
<li>Channal（通道）（Read/WRITE)</li>
<li>Buffer（缓冲区）底层实现是一个数组</li>
<li>Selector（选择器）</li>
</ul>
<p>client和buffer交互，buffer和Channal之间读写，selector选择准备好的通道</p>
<blockquote>
<p>NIO是面向<strong>缓冲区</strong>，或者<strong>面向块</strong>的编程的，数据读取到一个它稍后处理的缓冲区，需要时候可以在缓冲器中前后移动，这句增加了处理过程中的灵活性能，使用它可以提供<strong>非阻塞</strong>的高伸缩网络</p>
</blockquote>
<h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><p>本质上是一个可以读写数据的内存块，是使用数组实现的容器对象，这个对象提供了一组方法，可以更加轻松的使用内存块，缓冲区设置了一些参数，可以跟踪和记录缓冲器状态的变化。</p>
<p><strong>参数</strong></p>
<ul>
<li>mark（标记，是读还是写）</li>
<li>position（位置，下一个要被读或写的元素索引）</li>
<li>limit（最大大小，在创建buffer时候设置）</li>
<li>capacity （容量）</li>
</ul>
<h3 id="Channal"><a href="#Channal" class="headerlink" title="Channal"></a>Channal</h3><ul>
<li>类似流但是通道可以同时进行读写，而流只能读或者写</li>
<li>可以异步读写数据</li>
<li>可以从缓冲区读写数据，也可以写数据到缓冲区</li>
</ul>
<blockquote>
<p>DatagramChannel是UDP的读取</p>
</blockquote>
<h4 id="案例1：把string通过nio的方式写入本地文件"><a href="#案例1：把string通过nio的方式写入本地文件" class="headerlink" title="案例1：把string通过nio的方式写入本地文件"></a>案例1：把string通过nio的方式写入本地文件</h4><ol>
<li>创建一个输出流</li>
<li>使用输出流对象，创建一个通道</li>
<li>创建一个大小为1024的buffer</li>
<li>把数据写入缓冲区</li>
<li>把缓冲区的数据杜阮流</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Channal1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str =<span class="string">&quot;ioioioi&quot;</span>;</span><br><span class="line">        <span class="comment">//创建一个输出流</span></span><br><span class="line">        <span class="keyword">try</span>(FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;e:\\file.txt&quot;</span>);</span><br><span class="line">            FileChannel channel = fileOutputStream.getChannel()) &#123;</span><br><span class="line">            <span class="comment">//创建一个缓冲区</span></span><br><span class="line">            ByteBuffer allocate = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">            allocate.put(str.getBytes());</span><br><span class="line">            allocate.flip();<span class="comment">//把limit的值设置为position，position设置为0，或是position设置为limit，持续--</span></span><br><span class="line">            <span class="comment">//把buffer数据写入到channel</span></span><br><span class="line">            channel.write(allocate);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="案例2：通过nio的方式读取本地文件"><a href="#案例2：通过nio的方式读取本地文件" class="headerlink" title="案例2：通过nio的方式读取本地文件"></a>案例2：通过nio的方式读取本地文件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Channel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;e:\\file.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>(FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            FileChannel channel = fileInputStream.getChannel()) &#123;</span><br><span class="line">            ByteBuffer byteBuffer =ByteBuffer.allocate((<span class="keyword">int</span>) file.length());</span><br><span class="line">            <span class="comment">//把通道的数据放入缓冲区</span></span><br><span class="line">            channel.read(byteBuffer);</span><br><span class="line">            <span class="comment">//把byteBuffer中的字节转成字符串</span></span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(byteBuffer.array()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="案例3：使用一个buffer进行文件的读写操作（复制文件）"><a href="#案例3：使用一个buffer进行文件的读写操作（复制文件）" class="headerlink" title="案例3：使用一个buffer进行文件的读写操作（复制文件）"></a>案例3：使用一个buffer进行文件的读写操作（复制文件）</h4><p>文件—&gt;Channel1—&gt;buffer—&gt;Channal2—&gt;文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Channel3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;e:\\file.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">             FileChannel channel1 = fileInputStream.getChannel();</span><br><span class="line">             FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;e:\\file2.txt&quot;</span>);</span><br><span class="line">             FileChannel channel2 = fileOutputStream.getChannel()) &#123;</span><br><span class="line">            ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">512</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;<span class="comment">//循环读取</span></span><br><span class="line">                <span class="comment">//复位,重置标志位，清空buffer</span></span><br><span class="line">                byteBuffer.clear();<span class="comment">//不加这个会死循环</span></span><br><span class="line">                <span class="keyword">int</span> read = channel1.read(byteBuffer);</span><br><span class="line">                <span class="keyword">if</span> (read == -<span class="number">1</span>) &#123;<span class="comment">//读取结束</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                byteBuffer.flip();</span><br><span class="line">                channel2.write(byteBuffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="案例4-：直连管道文件最快拷贝"><a href="#案例4-：直连管道文件最快拷贝" class="headerlink" title="案例4,：直连管道文件最快拷贝"></a>案例4,：直连管道文件最快拷贝</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Channel4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        fastCopy(<span class="string">&quot;e://last.rar&quot;</span>,<span class="string">&quot;e://copy.rar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">fastCopy</span><span class="params">(String readFile, String writeFile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (FileInputStream in = <span class="keyword">new</span> FileInputStream(readFile);</span><br><span class="line">             FileChannel readin = in.getChannel();</span><br><span class="line">             FileOutputStream out = <span class="keyword">new</span> FileOutputStream(writeFile);</span><br><span class="line">             FileChannel writeout = out.getChannel()) &#123;</span><br><span class="line">            writeout.transferFrom(readin,<span class="number">0</span>,readin.size());<span class="comment">//管道直连</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="MappedByteBuffer"><a href="#MappedByteBuffer" class="headerlink" title="MappedByteBuffer"></a>MappedByteBuffer</h4><p>可以让文件直接在内存（堆外内存）修改，操作系统不需要拷贝一次</p>
<h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><ol>
<li>java的NIO，使用非阻塞的IO方式，可以使用一个线程，处理多个客户端的连接，就会使用到Selector选择器</li>
<li>Selector可以检测到多个注册通道上是否有事件发生，（多个Channel以事件的方式注册到同一个Selector），如果有事件发生，便获取事件，然后进行相应的处理，这样就可以只用一个单线程去管理多个通道，也就是管理多个连接和请求</li>
<li>只用连接真正有读写事件发生时，才会进行读写，减少系统的开销，变扭不必为每个连接都创建一个线程，不用去维护多个线程</li>
<li>避免了多线程上下文切换导致的开销</li>
</ol>
<ul>
<li>当客户端连接时会通过<code>ServerSocketChannel</code>得到对应的<code>SocketChannel</code></li>
<li>把SocketChannel注册到一个Selector上</li>
<li>注册后返回一个<code>SelectionKey</code>，这个key会返回一个Selector通过一个Set管理起来</li>
<li>Selector进行监听select方法，返回用事件的通道数</li>
<li>进一步得到各个有事件发生的<code>SelectionKey</code></li>
<li>通过这个key反向获取<code>SocketChannel</code></li>
<li>通过得到的channel进行相应的io操作 </li>
</ul>
<h4 id="服务器代码"><a href="#服务器代码" class="headerlink" title="服务器代码"></a>服务器代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerNIO</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="comment">//创建ServerSocketChannel——&gt;ServerSocket</span></span><br><span class="line">             <span class="keyword">final</span> ServerSocketChannel ServersocketChannel = ServerSocketChannel.open();</span><br><span class="line">             <span class="keyword">final</span> Selector selector = Selector.open();</span><br><span class="line">        ) &#123;</span><br><span class="line">            ServersocketChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">6666</span>));</span><br><span class="line">           ServersocketChannel.configureBlocking(<span class="keyword">false</span>);<span class="comment">//为非阻塞模式</span></span><br><span class="line">            <span class="comment">//把serverServersocketChannel注册到selector，关心事件为OP_ACCEPT</span></span><br><span class="line">            ServersocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//循环等待客户端连接</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(selector.select(<span class="number">1000</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;无连接，等待了1s&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//拿到有事件发生的selectionKey</span></span><br><span class="line">                <span class="comment">//如果&gt;0，表示已经获取到关注的时间</span></span><br><span class="line">                <span class="keyword">final</span> Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">                <span class="keyword">final</span> Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                    <span class="keyword">final</span> SelectionKey key = iterator.next();</span><br><span class="line">                    <span class="comment">//根据key的事件做相应的处理</span></span><br><span class="line">                    <span class="keyword">if</span>(key.isAcceptable())&#123;<span class="comment">//有新的客户端进行请求连接</span></span><br><span class="line">                        <span class="comment">//为这个客户端进行生成一个ServersocketChannel</span></span><br><span class="line">                        <span class="comment">//现在是阻塞的，不过没有关系，因已经是有请求的连接</span></span><br><span class="line">                        <span class="keyword">final</span> SocketChannel socketChannel = ServersocketChannel.accept();</span><br><span class="line">                        System.out.println(<span class="string">&quot;客户端连接成功&quot;</span>);</span><br><span class="line">                        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                        <span class="comment">//把当前的socketChannel注册到selector中</span></span><br><span class="line">                        socketChannel.register(selector,SelectionKey.OP_READ, ByteBuffer.allocate(<span class="number">1024</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(key.isReadable())&#123;<span class="comment">//是一个读事件</span></span><br><span class="line">                        <span class="comment">//通过key，反向获取到对应的Channel</span></span><br><span class="line">                        <span class="keyword">final</span> SocketChannel channel = (SocketChannel) key.channel();</span><br><span class="line">                        <span class="comment">//获取的这个channel关联的buffer</span></span><br><span class="line">                        <span class="keyword">final</span> ByteBuffer buffer = (ByteBuffer) key.attachment();</span><br><span class="line">                        channel.read(buffer);</span><br><span class="line">                        System.out.println(<span class="string">&quot;从客户端&quot;</span>+<span class="keyword">new</span> String(buffer.array()));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//手动从集合中移除当前的selectKey，防止重复操作</span></span><br><span class="line">                    iterator.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientNOI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//得到一个网络通道</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">            socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            InetSocketAddress address = <span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6666</span>);</span><br><span class="line">            <span class="keyword">if</span> (!socketChannel.connect(address)) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!socketChannel.finishConnect()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;连接需要时间，客户端可以进行其他工作&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="comment">//连接成功，发送数据</span></span><br><span class="line">            String str = <span class="string">&quot; hello,world&quot;</span>;</span><br><span class="line">            <span class="keyword">final</span> ByteBuffer buffer = ByteBuffer.wrap(str.getBytes());</span><br><span class="line">            <span class="comment">//发送数据把buffer写入channel</span></span><br><span class="line">            socketChannel.write(buffer);</span><br><span class="line">            <span class="comment">// Thread.sleep(5);</span></span><br><span class="line">            System.in.read();</span><br><span class="line">            <span class="comment">// TimeUnit.SECONDS.sleep(5);//暂停5s，方便观察</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (</span><br><span class="line">                IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="SelectionKey"><a href="#SelectionKey" class="headerlink" title="SelectionKey"></a>SelectionKey</h4><p>SelectionKey表示Seletor和网络通道的注册关系</p>
<ul>
<li>OP_ACCEPT 有新的网络可以连接是为accept，值为16</li>
<li>OP_CONNECT代表有连接已经建立，值为8</li>
<li>OP_READ读操作，值为1</li>
<li>OP_WRITE写操作， 值为4</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> SelectableChannel <span class="title">channel</span><span class="params">()</span></span>;<span class="comment">//获得与之关联的通道</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Selector <span class="title">selector</span><span class="params">()</span></span>;<span class="comment">//获得与之关联的选择器对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">interestOps</span><span class="params">()</span></span>;<span class="comment">//设置或改变监听事件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">attachment</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> attachment;&#125;<span class="comment">//获得遇到关联的共享数据</span></span><br></pre></td></tr></table></figure>

<h4 id="案例：简易聊天室"><a href="#案例：简易聊天室" class="headerlink" title="案例：简易聊天室"></a>案例：简易聊天室</h4><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nio.group;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HOST = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">6667</span>;</span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> SocketChannel socketChannel;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        selector = Selector.open();</span><br><span class="line">        socketChannel = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(HOST, PORT));</span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//注册到selector</span></span><br><span class="line">        socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">        <span class="comment">//得到userName</span></span><br><span class="line">        userName = socketChannel.getLocalAddress().toString().substring(<span class="number">1</span>);</span><br><span class="line">        System.out.println(userName + <span class="string">&quot;is ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向服务器发送消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendInfo</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        msg = userName + <span class="string">&quot; say: &quot;</span> + msg;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> write = socketChannel.write(ByteBuffer.wrap(msg.getBytes()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取从服务器的消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> readChannel = selector.select(<span class="number">2000</span>);</span><br><span class="line">            <span class="keyword">if</span> (readChannel &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                    <span class="keyword">final</span> SelectionKey key = iterator.next();</span><br><span class="line">                    <span class="keyword">if</span> (key.isReadable()) &#123;<span class="comment">//可读的</span></span><br><span class="line">                        <span class="keyword">final</span> SocketChannel channel = (SocketChannel) key.channel();</span><br><span class="line">                        <span class="keyword">final</span> ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                        channel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                        channel.read(buffer);<span class="comment">//从通道中读取</span></span><br><span class="line">                        <span class="keyword">final</span> String msg = <span class="keyword">new</span> String(buffer.array());</span><br><span class="line">                        System.out.println(msg.trim());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;没有可用的通道。。。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//启动客户端</span></span><br><span class="line">        <span class="keyword">final</span> Client client = <span class="keyword">new</span> Client();</span><br><span class="line">        <span class="comment">//启动一个线程</span></span><br><span class="line">        Executor pool = Executors.newCachedThreadPool();</span><br><span class="line">        pool.execute(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                client.readInfo();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;当前&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;等待2s&quot;</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine())&#123;</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            client.sendInfo(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nio.group;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> ServerSocketChannel serverSocketChannel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">6667</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Server</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//得到选择器</span></span><br><span class="line">            selector = Selector.open();</span><br><span class="line">            <span class="comment">//打开ServerSocketChannel</span></span><br><span class="line">            serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">            <span class="comment">//绑定端口</span></span><br><span class="line">            serverSocketChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(PORT));</span><br><span class="line">            <span class="comment">//设置非阻塞模式</span></span><br><span class="line">            serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//把serverSocketChannel注册到select上</span></span><br><span class="line">            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//循环处理</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> count = selector.select(<span class="number">2000</span>);</span><br><span class="line">                <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">                    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                        SelectionKey key = iterator.next();</span><br><span class="line">                        <span class="comment">//监听到accept事件</span></span><br><span class="line">                        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                            <span class="keyword">final</span> SocketChannel sc = serverSocketChannel.accept();</span><br><span class="line">                            <span class="comment">//把sc注册到select</span></span><br><span class="line">                            sc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                            sc.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                            System.out.println(sc.getRemoteAddress() + <span class="string">&quot;上线&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (key.isReadable()) &#123;<span class="comment">//通道发生可读事件</span></span><br><span class="line">                            <span class="comment">//处理读</span></span><br><span class="line">                            readData(key);</span><br><span class="line">                        &#125;</span><br><span class="line">                        iterator.remove();<span class="comment">//防止重复操作</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;服务器等待中&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读客户端消息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readData</span><span class="params">(SelectionKey key)</span> </span>&#123;</span><br><span class="line">        SocketChannel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//得到channel</span></span><br><span class="line">            channel = (SocketChannel) key.channel();</span><br><span class="line">            <span class="comment">//创建buffer</span></span><br><span class="line">            <span class="keyword">final</span> ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">            <span class="keyword">int</span> count = channel.read(buffer);</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(buffer.array());</span><br><span class="line">                <span class="comment">//输出消息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;客户端：&quot;</span> + msg);</span><br><span class="line">                <span class="comment">//转发消息(排除自己)</span></span><br><span class="line">                sendInfo(msg,channel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(channel.getRemoteAddress()+<span class="string">&quot;离线了&quot;</span>);</span><br><span class="line">                key.cancel();<span class="comment">//取消注册</span></span><br><span class="line">                channel.close();<span class="comment">//关闭通道</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">                ioException.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转发消息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendInfo</span><span class="params">(String msg, SocketChannel self)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器转发消息中。。。&quot;</span>);</span><br><span class="line">            <span class="comment">//遍历所有注册到selector上的channel，并排除自己</span></span><br><span class="line">            <span class="keyword">for</span> (SelectionKey key : selector.keys()) &#123;</span><br><span class="line">                <span class="keyword">final</span> Channel targetChannel = key.channel();</span><br><span class="line">                <span class="keyword">if</span> (targetChannel <span class="keyword">instanceof</span> SocketChannel &amp;&amp; targetChannel != self) &#123;</span><br><span class="line">                    <span class="comment">//保证是一个socketChannel并保证不是自己</span></span><br><span class="line">                    <span class="keyword">final</span> SocketChannel dest = (SocketChannel) targetChannel;</span><br><span class="line">                    <span class="comment">//把msg放入buffer</span></span><br><span class="line">                    <span class="keyword">final</span> ByteBuffer buffer = ByteBuffer.wrap(msg.getBytes());</span><br><span class="line">                    <span class="comment">//把buffer转入通道</span></span><br><span class="line">                    dest.write(buffer);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Server server = <span class="keyword">new</span> Server();</span><br><span class="line">        server.listen();<span class="comment">//启动监听</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h2><ul>
<li>减少用户空间和内核空间的复制</li>
<li>在java中，常见的零拷贝有mmap（内存映射）和sendFile</li>
<li>我们说的零拷贝，是在操作系统的角度来说的</li>
<li>在内核空间缓存区中，没有数据是重复的（只有kernel buffer上的一份数据）。</li>
<li>零拷贝不仅仅带来的更少的数据复制，还可以带来其他的性能优势，比如上下文切换，更少的cpu缓存共享，无cpu效验与计算</li>
</ul>
<h3 id="传统拷贝"><a href="#传统拷贝" class="headerlink" title="传统拷贝"></a>传统拷贝</h3><p>DMA拷贝：direct memory access：直接内存拷贝，不使用cpu</p>
<p><strong>传统io</strong>：（经过4次拷贝，4次上下文状态切换）</p>
<ul>
<li>通过DMA硬件copy到内核空间</li>
<li>然后内核空间cpu拷贝到用户空间</li>
<li>然后cpu拷贝到内核空间上socket上的缓存空间</li>
<li>从DMA拷贝到硬件上的protocol engine（网络处理引擎）</li>
</ul>
<h3 id="内存映射优化（mmap）"><a href="#内存映射优化（mmap）" class="headerlink" title="内存映射优化（mmap）"></a>内存映射优化（mmap）</h3><ul>
<li>通过内存映射，把文件映射到内核缓冲区，同时，用户空间可以共享内核空间的数据，这样在进行网络传输是，就可以减少内核空间到用户空间的拷贝次数</li>
</ul>
<p><strong>io操作</strong>：（3次拷贝，4次状态切换）</p>
<ul>
<li>通过DMA，硬件copy到内核空间</li>
<li>建立内存映射（内核空间中的buffer和用户空间中的buffer建立映射关系），修改直接通过cpucopy在内核空间中完成</li>
<li>从DMA拷贝到硬件上的protocol engine（网络处理引擎）</li>
</ul>
<p>mmap适合小数据量的读写。</p>
<h3 id="sendFile优化"><a href="#sendFile优化" class="headerlink" title="sendFile优化"></a>sendFile优化</h3><ul>
<li>Linux 2.1提供了sendFile函数</li>
<li>数据不进入用户空间，直接从内存缓冲区进入到SocketBuffer</li>
<li>因为与用户态完全无关，所以减少了一次上下文切换</li>
</ul>
<p><strong>io操作</strong>：（3次拷贝，4次状态切换）</p>
<ul>
<li>通过DMA copy直接到内核空间buffer上</li>
<li>内核空间buffer经过cpu拷贝到socket buffer上，并进行修改</li>
<li>从DMA拷贝到硬件上的protocol engine（网络处理引擎）</li>
</ul>
<p>sendFile适合大文件的传输</p>
<h4 id="2-4版本中的优化"><a href="#2-4版本中的优化" class="headerlink" title="2.4版本中的优化"></a>2.4版本中的优化</h4><p><strong>修改了sendFIle，避免内核空间拷贝到Socket buffer的操作，直接拷贝到协议栈中，减少一次数据拷贝</strong></p>
<p>没有cpu拷贝参与，实现了真正的零拷贝</p>
<p><strong>io操作</strong>：（2次拷贝，两次状态切换）</p>
<ul>
<li>通过DMA copy直接到内核空间buffer上</li>
<li>内核空间buffer通过DMA拷贝直接到硬件上的protocol engine（网络处理引擎）</li>
</ul>
<h4 id="案例：传输一个大文件"><a href="#案例：传输一个大文件" class="headerlink" title="案例：传输一个大文件"></a>案例：传输一个大文件</h4><ul>
<li>NIO零拷贝使用了transferTo的方式传递一个大文件</li>
</ul>
<blockquote>
<p>long 发送字节数 =  channel.transferTo(开始位置，结束位置，目标channel)；</p>
</blockquote>
<h2 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h2><p>jdk7提供了Asynchronous I/O，即为AIO，异步非阻塞模式</p>
<p>在进行io编程式常用地两种模式，Reactor和Proactor </p>
<ul>
<li>NIO采用了Reacor，当有事件触发时，服务器端得到通知，进行相应的处理</li>
<li>AIO采用了Proactor模式，有效的请求才启动线程，特点是由操作系统完成之后才通知服务器去启动线程去处理，一般适用于连接数多并且长连接的引用</li>
</ul>
<p>异步非阻塞无需一个线程去轮询所有IO操作的状态改变，在相应的状态改变后，系统会通知对应的线程来处理。对应到烧开水中就是，为每个水壶上面装了一个开关，水烧开之后，水壶会自动通知我水烧开了。</p>
<h4 id="使用AIO进行文件读写"><a href="#使用AIO进行文件读写" class="headerlink" title="使用AIO进行文件读写"></a>使用AIO进行文件读写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadFromFile</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Path file = Paths.get(<span class="string">&quot;/usr/a.txt&quot;</span>);</span><br><span class="line">    AsynchronousFileChannel channel = AsynchronousFileChannel.open(file);</span><br><span class="line"> </span><br><span class="line">    ByteBuffer buffer = ByteBuffer.allocate(<span class="number">100_000</span>);</span><br><span class="line">    Future&lt;Integer&gt; result = channel.read(buffer, <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (!result.isDone()) &#123;</span><br><span class="line">      ProfitCalculator.calculateTax();</span><br><span class="line">    &#125;</span><br><span class="line">    Integer bytesRead = result.get();</span><br><span class="line">    System.out.println(<span class="string">&quot;Bytes read [&quot;</span> + bytesRead + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfitCalculator</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ProfitCalculator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">calculateTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteToFile</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    AsynchronousFileChannel fileChannel = AsynchronousFileChannel.open(</span><br><span class="line">        Paths.get(<span class="string">&quot;/asynchronous.txt&quot;</span>), StandardOpenOption.READ,</span><br><span class="line">        StandardOpenOption.WRITE, StandardOpenOption.CREATE);</span><br><span class="line">    CompletionHandler&lt;Integer, Object&gt; handler = <span class="keyword">new</span> CompletionHandler&lt;Integer, Object&gt;() &#123;</span><br><span class="line"> </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(Integer result, Object attachment)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Attachment: &quot;</span> + attachment + <span class="string">&quot; &quot;</span> + result</span><br><span class="line">            + <span class="string">&quot; bytes written&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;CompletionHandler Thread ID: &quot;</span></span><br><span class="line">            + Thread.currentThread().getId());</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable e, Object attachment)</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;Attachment: &quot;</span> + attachment + <span class="string">&quot; failed with:&quot;</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    System.out.println(<span class="string">&quot;Main Thread ID: &quot;</span> + Thread.currentThread().getId());</span><br><span class="line">    fileChannel.write(ByteBuffer.wrap(<span class="string">&quot;Sample&quot;</span>.getBytes()), <span class="number">0</span>, <span class="string">&quot;First Write&quot;</span>,</span><br><span class="line">        handler);</span><br><span class="line">    fileChannel.write(ByteBuffer.wrap(<span class="string">&quot;Box&quot;</span>.getBytes()), <span class="number">0</span>, <span class="string">&quot;Second Write&quot;</span>,</span><br><span class="line">        handler);</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>BIO_NIO_AIO</tag>
      </tags>
  </entry>
  <entry>
    <title>贝壳公司一面经历</title>
    <url>/2020/11/11/%E8%B4%9D%E5%A3%B3%E5%85%AC%E5%8F%B8%E4%B8%80%E9%9D%A2%E7%BB%8F%E5%8E%86/</url>
    <content><![CDATA[<h1 id="贝壳公司一面"><a href="#贝壳公司一面" class="headerlink" title="贝壳公司一面"></a>贝壳公司一面</h1><p>先叫介绍一下自己，然后看到自己有说了解jdk源码，然后抓住String类来问了</p>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><blockquote>
<p>String a = new String(“a”);</p>
</blockquote>
<p>这句创建了几个对象？</p>
<p>String a不会创建，=不会创建。所以“a“是字符串常量池的一个对象，new String 是一个堆中的对象，返回这个对象的引用为a，所以一共创建了两个对象</p>
<blockquote>
<p>String str = “a”+”b”;</p>
</blockquote>
<p>产生几个对象？在编译时折叠，产生一个对象，要是不优化就是2个对象</p>
<blockquote>
<p>String a=new String(“b”+”c”);</p>
</blockquote>
<ul>
<li>字符串常量 “b” 被JVM存放在数据段区常量池中 </li>
<li>字符串常量 “c” 被JVM存放在数据段区常量池中 </li>
<li>由于String不可变性，”b”+”c” 又生成了一个字符串 被JVM存放在数据段区常量池中 </li>
<li>new String(“b”+”c”)对象被JVM存放在堆中</li>
</ul>
<blockquote>
<p>String a =”a” + new String(“b”);</p>
</blockquote>
<ul>
<li>创建“a”</li>
<li>创建”b”</li>
<li>创建new String（“b”）</li>
</ul>
<a id="more"></a>

<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ol>
<li><p>线程池中几种创建线程的方式</p>
<p>Executors中提供了四种方法，都是基于ThreadPoolExecutor传入不同的参数的。</p>
<ul>
<li>newCachedThreadPool 创建一个可以缓存的线程池，如果线程池长度超过处理需要，可以回收线程或者新建线程</li>
<li>newFixThreadPool创建定长线程池，超出的线程在queue队列等待</li>
<li>newScaneduledThreadPool 创建一个定长线程池，支持定时和周期性任务执行</li>
<li>newSingleThreadExecutor创建一个单线程的线程池，在唯一的工作线程执行任务，保证按指定顺序进行。（FIFO，LIFO，优先级）</li>
</ul>
</li>
<li><p>这些参数中corePoolSize和maximumPoolSize已经线程数量poolsize的关系</p>
<ol>
<li>当poolsize&lt;corePoolSize时，直接创建一个新的线程处理、</li>
<li>当poolsize&gt;=corePoolSize,任务队列未满时（LinkedBlockingQueue不会满），就把任务提供到阻塞队列中排队</li>
<li>又当阻塞队列也满了的时候：<ul>
<li>当前poolSize&lt;maximumPoolSize，那么就<strong>新增线程</strong>来处理任务；</li>
<li>当前poolSize=maximumPoolSize，那么意味着线程池的处理能力已经达到了极限，此时需要拒绝新增加的任务。至于如何拒绝处理新增的任务，取决于线程池的饱和策略<code>RejectedExecutionHandler</code></li>
</ul>
</li>
</ol>
</li>
<li><p>对阻塞队列了解多少</p>
<p>就和他说基于ReentranLock，最常用是实现生产者——消费者模式</p>
<p>有ArrayBlockingQueue和LinkedBlockingQueue的实现，分别是有界和无界，还有延迟的DelayBlockingQueue实现，</p>
<ul>
<li><p>LinkedBlockingQueue阻塞队列持有两把锁：<strong>一把锁用于入队，一把锁用于出队</strong>，这也就意味着，同一时刻，只能有一个线程执行入队，其余执行入队的线程将会被阻塞；同时，可以有另一个线程执行出队，其余执行出队的线程将会被阻塞。换句话说，虽然入队和出队两个操作同时均只能有一个线程操作，但是可以一个入队线程和一个出队线程共同执行，也就意味着可能同时有两个线程在操作队列，那么为了维持线程安全，LinkedBlockingQueue使用一个AtomicInterger类型的变量表示当前队列中含有的元素个数，所以可以确保两个线程之间操作底层队列是线程安全的。</p>
</li>
<li><p>ArrayBlockingQueue持有一把锁，意味着同一时刻只有一个线程能进行入队或者出队的操作。</p>
</li>
</ul>
</li>
<li><p>谈谈你对锁的了解</p>
</li>
</ol>
<ol start="5">
<li><p>你现在有两个线程，一个用于打印奇数一个用于打印偶数，让他们打印出0-100。要写代码，晚点补上</p>
<ul>
<li><p>使用Object类中的wait和notif方法实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> thread.two;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Print p = <span class="keyword">new</span> Print();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">           <span class="comment">// System.out.println(&quot;thread1启动&quot;);</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">                p.print1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">          <span class="comment">//  System.out.println(&quot;thread2启动&quot;);</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">                p.print0();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Print</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isOdd = <span class="keyword">true</span>;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">print0</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!isOdd)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        isOdd = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">     <span class="comment">//   System.out.println(Thread.currentThread() + &quot; i&quot;+i);</span></span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (isOdd)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">               <span class="comment">// e.printStackTrace();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">        isOdd = <span class="keyword">true</span>;</span><br><span class="line">     <span class="comment">//   System.out.println(Thread.currentThread() + &quot; i&quot;+i);</span></span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用ReentranLock中Condition（状态对象）提供的await，signal</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    Condition condition = lock.newCondition();</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isOdd = <span class="keyword">true</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print0</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">if</span>(!isOdd)&#123;</span><br><span class="line">            condition.await();</span><br><span class="line">        &#125;</span><br><span class="line">        isOdd=<span class="keyword">false</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        i++;</span><br><span class="line">        condition.signal();</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">if</span> (isOdd)&#123;</span><br><span class="line">            condition.await();</span><br><span class="line">        &#125;</span><br><span class="line">        isOdd=<span class="keyword">true</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        i++;</span><br><span class="line">        condition.signal();</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用1个互斥信号量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line">    Semaphore o = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line">    Semaphore e = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print0</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        o.acquire();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        i++;</span><br><span class="line">        e.release();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        e.acquire();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        i++;</span><br><span class="line">        o.release();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>栅栏（Barrier）</p>
</li>
<li><p>闭锁（Latch）</p>
</li>
</ul>
</li>
<li><p>你现在有3个线程，循环打印ABC</p>
<ul>
<li><p>使用Object类中的wait和notif方法实现</p>
<p>使用synchronized、wait()、notifyAll()、value值决定线程的执行顺序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintABC</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (value != <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: A&quot;</span>);</span><br><span class="line">            value = <span class="number">2</span>;</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (value != <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: B&quot;</span>);</span><br><span class="line">            value = <span class="number">3</span>;</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (value != <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: C&quot;</span>);</span><br><span class="line">            value = <span class="number">1</span>;</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PrintABC printABC = <span class="keyword">new</span> PrintABC();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    printABC.printA();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程一&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    printABC.printB();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程二&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    printABC.printC();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程三&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用ReentranLock中Condition（状态对象）提供的await，signal</p>
</li>
<li><p>使用3个互斥信号量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreTest</span> </span>&#123;</span><br><span class="line">    Semaphore a = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line">    Semaphore b = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br><span class="line">    Semaphore c = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        a.acquire();</span><br><span class="line">        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        b.release();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        b.acquire();</span><br><span class="line">        System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        c.release();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printC</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        c.acquire();</span><br><span class="line">        System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        a.release();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ol>
<ul>
<li><p>使用CyclicBarrier（循环栅栏）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> thread.two.three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CycliBarrierDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">15</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> <span class="keyword">throws</span>  InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;n ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;A&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                barrier.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printC</span><span class="params">()</span> <span class="keyword">throws</span>  InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;n ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">2</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;C&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                barrier.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;n ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;B&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                barrier.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ol>
<li><p>查看过linux日志吗？以tomcat为例，先切换到：cd usr/local/tomcat3/logs </p>
<ul>
<li>tail（查看尾部）</li>
<li>head（查看头部）</li>
<li>cat</li>
<li>tac（由最后一行到第一行反向在萤幕上显示出来）</li>
<li>sed（查找日志文件特定的一段 , 也可以根据时间的一个范围查询）</li>
<li>less</li>
<li>echo</li>
</ul>
<p>-f 循环读取</p>
<p>-q 不显示处理信息</p>
<p>-v 显示详细的处理信息</p>
<p>-c&lt;数目&gt; 显示的字节数</p>
<p>-n&lt;行数&gt; 显示行数</p>
<p>-q, –quiet, –silent 从不输出给出文件名的首部</p>
<p>-s, –sleep-interval=S 与-f合用,表示在每次反复的间隔休眠S秒</p>
<p>tail -n 100 catalina.out 查询日志尾部最后100行的日志;</p>
<p>tail -n +100 catalina.out 查询100行之后的所有日志;</p>
<p>tail -fn 100 catalina.out 循环实时查看最后100行记录(最常用的)</p>
</li>
<li><p>查看过linux系统日志吗？</p>
<p>系统所有的日志都在 /var/log 下面自己看</p>
<ul>
<li>/var/log/message 系统启动后的信息和错误日志，是redhat Linux中最常用的日志之一</li>
<li>/var/log/secure 与安全相关的日志信息</li>
<li>/var/log/maillog 与邮件相关的日志信息</li>
<li>/var/log/cron 与定时任务相关的日志信息</li>
<li>/var/log/spooler 与UUCP和news设备相关的日志信息</li>
<li>/var/log/boot.log 守护进程启动和停止相关的日志消息</li>
<li>/var/log/wtmp 该日志文件永久记录每个用户登录、注销及系统的启动、停机的事件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;var&#x2F;log&#x2F;syslog</span><br></pre></td></tr></table></figure>

<ol>
<li><p>last </p>
<p>-a 把从何处登入系统的主机名称或<a href="http://man.linuxde.net/ip">ip</a>地址，显示在最后一行。<br>-d 指定记录文件。指定记录文件。将IP地址转换成主机名称。<br>-f &lt;记录文件&gt; 　指定记录文件。<br>-n &lt;显示列数&gt;或-&lt;显示列数&gt; 　设置列出名单的显示列数。<br>-R 不显示登入系统的主机名称或IP地址。<br>-x 显示系统关机，重新开机，以及执行等级的改变等信息</p>
<p>以下看所有的重启、关机记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">last | grep reboot</span><br><span class="line">last | grep shutdown</span><br></pre></td></tr></table></figure>
</li>
<li><p>history</p>
<p>列出本用户的所有历史记录，从开机开始</p>
<p>只列出最近10条记录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">history 10</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>top中有哪些参数，你关注过哪些？</p>
</li>
</ol>
<h3 id="SQL方面"><a href="#SQL方面" class="headerlink" title="SQL方面"></a>SQL方面</h3><ol>
<li><p>使用Mybatis，对#，和$理解多少</p>
<p>占位符和替换符</p>
</li>
<li><p>使用limit做分页查询</p>
<p>limit有两个参数</p>
</li>
<li><p>limit在数据量大的时候出现什么情况</p>
</li>
</ol>
<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ol>
<li><p>你项目中使用redis实现消息队列的方式是怎样的，如何进行通知</p>
<p>（）</p>
</li>
<li><p>redis中五大数据结构</p>
<ul>
<li>String</li>
<li>set</li>
<li>List</li>
<li>zSet</li>
<li>hash（map）</li>
</ul>
</li>
</ol>
<h3 id="其他方面"><a href="#其他方面" class="headerlink" title="其他方面"></a>其他方面</h3><h4 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h4><p>是 Twitter 开源的分布式 id 生成算法。其核心思想就是：使用一个 64 bit 的 long 型的数字作为全局唯一 id。在分布式系统中的应用十分广泛，且ID 引入了时间戳，基本上保持自增的</p>
<ul>
<li>第一个部分，是 1 个 bit：0，这个是无意义的。因为二进制里第一个 bit 为如果是 1，那么都是负数，但是我们生成的 id 都是正数，所以第一个 bit 统一都是 0。</li>
<li>第二个部分是 41 个 bit：表示的是时间戳。</li>
<li>第三个部分是 5 个 bit：表示的是机房 id，10001。</li>
<li>第四个部分是 5 个 bit：表示的是机器 id，1 1001。</li>
<li>第五个部分是 12 个 bit：表示的序号，就是某个机房某台机器上这一毫秒内同时生成的 id 的序号，0000 00000000。来区分同一个毫秒内的 4096 个不同的 id。</li>
</ul>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>你的某个服务假设要生成一个全局唯一 id，那么就可以发送一个请求给部署了 SnowFlake 算法的系统，由这个 SnowFlake 算法系统来生成唯一 id。</p>
<p>这个 SnowFlake 算法系统首先肯定是知道自己所在的机房和机器的，比如机房 id = 17，机器 id = 12。</p>
<p>接着 SnowFlake 算法系统接收到这个请求之后，首先就会用二进制位运算的方式生成一个 64 bit 的 long 型 id，64 个 bit 中的第一个 bit 是无意义的。</p>
<p>接着 41 个 bit，就可以用当前时间戳（单位到毫秒），然后接着 5 个 bit 设置上这个机房 id，还有 5 个 bit 设置上机器 id。</p>
<p>最后再判断一下，当前这台机房的这台机器上这一毫秒内，这是第几个请求，给这次生成 id 的请求累加一个序号，作为最后的 12 个 bit。</p>
<p>这个算法可以保证说，一个机房的一台机器上，在同一毫秒内，生成了一个唯一的 id。可能一个毫秒内会生成多个 id，但是有最后 12 个 bit 的序号来区分开来。</p>
<h4 id="实现一个二叉树的中序非递归遍历"><a href="#实现一个二叉树的中序非递归遍历" class="headerlink" title="实现一个二叉树的中序非递归遍历"></a>实现一个二叉树的中序非递归遍历</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(root);</span><br><span class="line">            root = root.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            root = stack.pop();</span><br><span class="line">            ans.add(root.val);</span><br><span class="line">            <span class="keyword">if</span>(root.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                root = root.right;</span><br><span class="line">                <span class="keyword">while</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    stack.push(root);</span><br><span class="line">                    root = root.left;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在查看JDK源码时，你印象最深的一段代码是什么"><a href="#在查看JDK源码时，你印象最深的一段代码是什么" class="headerlink" title="在查看JDK源码时，你印象最深的一段代码是什么"></a>在查看JDK源码时，你印象最深的一段代码是什么</h4><p>你从中学习到了什么东西</p>
<p>我讲了讲位操作作为状态判断的依据</p>
<p>比如一个ThreadPool中高三位作为线程池状态，低29位作为线程数</p>
<p>读写锁ReentrantReadWriteLock中，高16位作为读锁状态，低16位作为写锁状态</p>
]]></content>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
</search>
